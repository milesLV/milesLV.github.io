library(readr)
library(shiny)
library(tidyverse)
library(sf)
library(plotly)
library(bslib)
data_by_dist <- read_rds("data/diverse_data_by_dist.rds")
data_by_year <- read_csv("data/diverse_data_by_year.csv")

metro_names <- data_by_dist %>% pull(metro_name) %>% unique()

# Define UI for application that draws a histogram
ui <- fluidPage(

    # Application title
    # titlePanel("Neighborhood Diversity Plot"),

    # Sidebar with a slider input for cities
    sidebarLayout(
        sidebarPanel(
              selectInput("city", # id
                          label = "Choose Metro Area",
                          choices = metro_names),
              sliderInput("span", #id
                          label = "Line Smoothness",
                          min = 0,
                          max = 1,
                          value = 0.5)
          ),
        
        # Show plots
        mainPanel(
          navset_card_tab(
            title = "Locating neighborhood diversity in the American metropolis",
            nav_panel("Explore metros", plotlyOutput("plotly_scatterplot"), # adding plotly to this
                      fluidRow(
                        splitLayout(cellWidths = c("50%", "50%"), plotOutput("mapPlot"), plotOutput("barPlot")))
                      ),
            
            nav_panel("Compare over time", verbatimTextOutput("summary")),
            
            nav_panel("About", tableOutput("table"))
          )
        )
    )
)

# Define server logic required to draw a histogram
server <- function(input, output) {
    output$plotly_scatterplot <- renderPlotly({ #adding plotly to rendering
      p <- data_by_dist %>%
        filter(metro_name == input$city) %>%
        ggplot(aes(x = distmiles, y = entropy)) +
          geom_point(aes(key = tract_id)) +
          geom_smooth(span = input$span, method = 'loess', se = FALSE)
      
      ggplotly(p, source = "plotly_scatterplot") %>%
        event_register("plotly_selected") %>%
        layout(dragmode = "select")   
    })
    
    
    
    output$mapPlot <- renderPlot({
      
      ed <- event_data("plotly_selected", source = "plotly_scatterplot")
      
      if (is.null(ed)) {
        p <- data_by_dist %>%
          filter(metro_name == input$city) %>%
          ggplot(aes(fill = entropy)) +
            geom_sf()
      } else {
        filteredTracts <- data_by_dist %>% filter(tract_id %in% ed$key)
        zoomed_area <- st_bbox(filteredTracts)
        
        p <- data_by_dist %>% # Updated ggplot code to zoom in to the selected census tracts and highlight their borders in red
          st_crop(zoomed_area) %>%
          ggplot(aes(fill = entropy)) +
            geom_sf() +
            geom_sf(data = filteredTracts, color = "yellow", linewidth = 1.2)
      }
      p
    })

    output$barPlot <- renderPlot({
      data_by_dist %>%
        st_drop_geometry() %>%  # dropping geometries
        filter(metro_name == input$city) %>%
        pivot_longer(cols = aian:white, values_to = "value", names_to = "race") %>%
        group_by(race) %>%
        summarize(total = sum(value)) %>% 
        ggplot(aes(x = race, y = total)) +
          geom_col()
    })
}

# Run the application 
shinyApp(ui = ui, server = server)
