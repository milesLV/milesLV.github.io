[
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n      \n        Author\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nMadrid Metro MySQL Database\n\n\n\nUniversity\n\nMySQL\n\n\n\n\n\n\n\nMiles Libbey V\n\n\n\n\n\n\n\n\n\n\n\n\n\nLoneliness Project\n\n\n\nUniversity\n\nSelf-Directed\n\nPython\n\n\n\n\n\n\n\nMiles Libbey V\n\n\n\n\n\n\n\n\n\n\n\n\n\nKnight’s Tour Adjacency Matrix Visual\n\n\n\nSelf-Directed\n\nR\n\n\n\n\n\n\n\nMiles Libbey V\n\n\n\n\n\n\n\n\n\n\n\n\n\nHousing Status Changes While in Substance Abuse Treatment (Senior Capstone)\n\n\n\nUniversity\n\nR\n\nPython\n\nTableau\n\n\n\n\n\n\n\nMiles Libbey V\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/LonelinessProject/index.html",
    "href": "projects/LonelinessProject/index.html",
    "title": "Loneliness Project",
    "section": "",
    "text": "This project started as a project as part of the course, “Language in Social Media: A Computational Linguistics Perspective” taught by Zuoyu Tian, who was a great source of support in this project. The group consisted of Elan Levin, Sylvain Zong-Nabia, and myself. Our team set out to explore a pressing question:\n“Is loneliness becoming normalized among young people in the digital age?”\nWe combined computational methods, sentiment analysis, and topic modeling to analyze thousands of social media posts from Reddit. Our findings shed light on how loneliness is not only experienced but also culturally discussed and potentially normalized. I went on individually to expand on the project and refine some of the aspects we didn’t have time to address due to our heavy workloads in the final months of university."
  },
  {
    "objectID": "projects/LonelinessProject/index.html#data-acquisition",
    "href": "projects/LonelinessProject/index.html#data-acquisition",
    "title": "Loneliness Project",
    "section": "",
    "text": "Our data came from when we were conducting a literature review of loneliness of social media to find a gap in the literature to explore.\nhttps://huggingface.co/datasets/FIG-Loneliness/FIG-Loneliness"
  },
  {
    "objectID": "projects/LonelinessProject/index.html#bibliography",
    "href": "projects/LonelinessProject/index.html#bibliography",
    "title": "Loneliness Project",
    "section": "Bibliography",
    "text": "Bibliography"
  },
  {
    "objectID": "projects/NonProfitMapper/index.html",
    "href": "projects/NonProfitMapper/index.html",
    "title": "Nonprofit Leaflet",
    "section": "",
    "text": "Nonprofit Mapper"
  },
  {
    "objectID": "projects/madridMetro/index.html",
    "href": "projects/madridMetro/index.html",
    "title": "Madrid Metro MySQL Database",
    "section": "",
    "text": "The objective of the project was to design and implement a MySQL database that could, in theory, serve as the backbone of Madrid’s metro system—automatically handling ticket dispensing and decommissioning (upon expiration), calculating fare prices based on the client’s city zone and discount eligibility, and incorporating a detailed schema and features derived from a set of assumptions.\n\n\n\nMap of the Madrid metro lines"
  },
  {
    "objectID": "projects/madridMetro/index.html#project-overview",
    "href": "projects/madridMetro/index.html#project-overview",
    "title": "Madrid Metro MySQL Database",
    "section": "",
    "text": "The objective of the project was to design and implement a MySQL database that could, in theory, serve as the backbone of Madrid’s metro system—automatically handling ticket dispensing and decommissioning (upon expiration), calculating fare prices based on the client’s city zone and discount eligibility, and incorporating a detailed schema and features derived from a set of assumptions.\n\n\n\nMap of the Madrid metro lines"
  },
  {
    "objectID": "projects/madridMetro/index.html#system-architecture",
    "href": "projects/madridMetro/index.html#system-architecture",
    "title": "Madrid Metro MySQL Database",
    "section": "System Architecture",
    "text": "System Architecture\nRelational Schema & EER Diagram\n\nClients: stores personal info, address, and the type of discount they receive\nCards: monthly cards and rechargeable cards tied to each client\nCities: city zones and their respective pricing rules\nStatuses: discount categories (student, senior, etc.)\nCharge History: logs transactions and recharges\n\n\nRelational Schema\n\n\n\n\n\n\n\nEnhanced Entity-Relationship (EER) Diagram"
  },
  {
    "objectID": "projects/madridMetro/index.html#key-features",
    "href": "projects/madridMetro/index.html#key-features",
    "title": "Madrid Metro MySQL Database",
    "section": "Key Features",
    "text": "Key Features\n\nDatabase Modeling\n\nNormalized schema with primary/foreign keys and cascading deletes.\nMetadata defined for all entities, ensuring referential integrity.\n\n\n\nAutomation with Triggers & Events\n\nAutomatic card issuance when registering a new client\nRecharge triggers that update validity and transaction logs\nDaily event to expire cards after 30 days without renewal\nDynamic pricing trigger calculates ticket cost based on:\n✦ Age (student/senior discounts)\n✦ City zone\n✦ Special discount status\n\n\n\nLifecycle Management\n\nFull support for registration → recharge → replacement → cancellation / expiration\nON DELETE CASCADE ensures dependent records are cleaned automatically\nAutomatic re-pricing when client address or eligibility changes"
  },
  {
    "objectID": "projects/madridMetro/index.html#code-snippet-examples",
    "href": "projects/madridMetro/index.html#code-snippet-examples",
    "title": "Madrid Metro MySQL Database",
    "section": "Code Snippet Examples",
    "text": "Code Snippet Examples\n\n1. Automatic Card Creation\nDELIMITER //\nCREATE TRIGGER makeClientMonthlyCard\nAFTER INSERT ON clients\nFOR EACH ROW\nBEGIN\n    DECLARE last_number INT;\n    DECLARE newCardID INT;\n\n    SELECT COALESCE(MAX(CardID), 0) INTO last_number FROM monthlyCard;\n    SET newCardID = last_number + 1;\n\n    INSERT INTO monthlyCard (ClientID, CardID, CardType, DateCharged, IsValid)\n    VALUES (NEW.ClientID, newCardID, \"M\", CURDATE(), 1);\nEND;//\nDELIMITER ;\nAutomatically issues a monthly card when a new client registers\n\n\n2. Automatic Recharge Handling\nDELIMITER //\nCREATE TRIGGER check_date_charged\nAFTER INSERT ON chargeHistory\nFOR EACH ROW\nBEGIN\n    UPDATE monthlyCard\n    SET DateCharged = CURDATE(), IsValid = 1\n    WHERE ClientID = NEW.ClientID;\nEND;//\nDELIMITER ;\nEnsures monthly card validity updates instantly after a recharge\n\n\n3. Daily Event to Expire Cards\nDELIMITER //\nCREATE EVENT updateValidity\nON SCHEDULE EVERY 1 DAY\nSTARTS TIMESTAMP(CURRENT_DATE + INTERVAL 1 DAY) + INTERVAL '02:30:00' HOUR_SECOND\nDO\nBEGIN\n    UPDATE monthlyCard\n    SET IsValid = 0\n    WHERE DateCharged &lt;= DATE_SUB(CURDATE(), INTERVAL 30 DAY);\nEND;//\nDELIMITER ;\nKeeps card status accurate by expiring inactive cards daily\n\n\n4. Dynamic Pricing Based on Age, Zone, and Circumstance\nDELIMITER //\nCREATE TRIGGER calculatePrice\nBEFORE INSERT ON clients\nFOR EACH ROW\nBEGIN\n    DECLARE client_age INT;\n    DECLARE client_discount DECIMAL(10,2);\n    DECLARE final_price DECIMAL(10,2);\n    DECLARE zone_price DECIMAL(10,2);\n    DECLARE ifStudent BOOLEAN;\n    DECLARE ifZoneA BOOLEAN;\n\n    SET client_age = TIMESTAMPDIFF(YEAR, NEW.BDay, CURDATE());\n\n    -- Apply senior discount when turning 65\n    IF client_age &gt;= 65 THEN\n        SET NEW.discountType = CONCAT(SUBSTRING(NEW.discountType, 1, CHAR_LENGTH(NEW.discountType) - 1), 'M');\n    END IF;\n\n    SELECT statuses.discountAmount INTO client_discount\n      FROM statuses WHERE statuses.typeID = NEW.discountType;\n\n    IF NEW.discountType LIKE 'E%' THEN \n      SET ifStudent = 1; \n      ELSE SET ifStudent = 0; \n    END IF;\n    \n    SELECT ZonePrice INTO zone_price FROM cities WHERE CityName = NEW.City;\n    \n    SELECT EXISTS(\n        SELECT 1 FROM clients\n        WHERE PostalCode LIKE '280%' AND ClientID = NEW.ClientID\n    ) INTO ifZoneA;\n\n    IF ifStudent = 1 AND client_age &gt;= 65 THEN\n        SET final_price = 6.30 * client_discount;\n    ELSEIF client_age &lt; 26 OR ifStudent = 1 THEN\n        SET final_price = 20.00 * client_discount;\n    ELSEIF client_age &gt;= 65 THEN\n        SET final_price = 6.30 * client_discount;\n    ELSEIF ifZoneA = 1 THEN\n        SET final_price = 54.60 * client_discount;\n    ELSE\n        SET final_price = zone_price * client_discount;\n    END IF;\n\n    INSERT INTO chargeHistory (ClientID, ChargeAmount, Type) \n    VALUES (NEW.ClientID, final_price, \"Purchase\");\nEND;//\nDELIMITER ;\nDetermines ticket cost dynamically based on multiple client attributes"
  },
  {
    "objectID": "projects/madridMetro/index.html#example-queries",
    "href": "projects/madridMetro/index.html#example-queries",
    "title": "Madrid Metro MySQL Database",
    "section": "Example Queries",
    "text": "Example Queries\n-- Show all clients in Leganés with zone category and purchase price\nSELECT clients.*, cities.ZoneID, chargeHistory.ChargeAmount\n  FROM clients\n  INNER JOIN cities ON clients.City = cities.CityName\n  INNER JOIN chargeHistory ON clients.ClientID = chargeHistory.ClientID\n  WHERE clients.City = 'Leganes';\n-- Check validity of a specific client’s card\nSELECT ClientID, isValid \n  FROM monthlyCard\n  WHERE ClientID = \"002\";"
  },
  {
    "objectID": "projects/madridMetro/index.html#technical-highlights",
    "href": "projects/madridMetro/index.html#technical-highlights",
    "title": "Madrid Metro MySQL Database",
    "section": "Technical Highlights",
    "text": "Technical Highlights\n\nSQL: DDL, DML, joins, triggers, events, cascading constraints\nRelational schema design with 1:1 and 1:M relationships\nBusiness rules automation embedded directly in the database\nData integrity & lifecycle tracking across multiple entities"
  },
  {
    "objectID": "projects/madridMetro/index.html#skills",
    "href": "projects/madridMetro/index.html#skills",
    "title": "Madrid Metro MySQL Database",
    "section": "Skills",
    "text": "Skills\nThis project demonstrates my ability to: - Design real-world relational databases - Implement automated logic based on given assumptions inside SQL - Manage complex client workflows in a high-traffic system\n\nSkills Demonstrated: MySQL · Relational Database Design · SQL Triggers & Events · Data Lifecycle Management"
  },
  {
    "objectID": "projects/KnightTourVisual/app.html",
    "href": "projects/KnightTourVisual/app.html",
    "title": "Knight’s Tour Adjacency Matrix Visual",
    "section": "",
    "text": "Below you will find a Shiny App made for fun using concepts learned in Linear Algebra and Computational Linear Algebra, most notably graphs, adjacency matrices, matrix exponentiation. All of the concepts used to build the app are explained from an introductory level if you are interested in learning what is going on behind the scenes."
  },
  {
    "objectID": "projects/KnightTourVisual/app.html#the-math-behind-the-app",
    "href": "projects/KnightTourVisual/app.html#the-math-behind-the-app",
    "title": "Knight’s Tour Adjacency Matrix Visual",
    "section": "The Math Behind the App",
    "text": "The Math Behind the App\n\nAdjacency Matrices\nAn adjacency matrix is a type of matrix used to represent a mathematical graph, as pictured below:\n\n\n\n\n\nThe matrix shows which vertices are adjacent to one another and which are not. It can be thought of as this: rows are the starting points and the columns are the ending points. If you can get from a starting point to an ending point, then a 1 is placed, and a 0 is placed if not.\n\\[\nA =\n\\begin{bmatrix}\n0 & 1 & 0 & 1 \\\\\n1 & 0 & 0 & 1 \\\\\n0 & 0 & 0 & 1 \\\\\n1 & 1 & 1 & 0 \\\\\n\\end{bmatrix}\n\\]\nFor example, in our graph, 2 and 4 are connected, so if you look in the 2nd row (the starting place) and then look at the 4th row (the ending place), you will see that there is a 1. Vice versa, if you look at \\(A_{2,3}\\) you will see that it is a 0, meaning 2 and 3 are unconnected, which can be confirmed from looking at the graph. These types of matrices are always square \\(n \\times n\\) matrices because it just the same vertices being shown in the both and rows and columns. How this relates to a knight is if you imagine the 64 squares on a chess board as vertices, we can graph the connecting vertices to show what the knight can make in one move (later on we will be able to show multiple moves, but we are not there yet).\nHowever, chess squares have defined places where they are. In this graph, 1 can be put to the right of 4 and it wouldn’t matter, as seen below.\n\n\n\n\n\n\n\nThere is not difference between this graph and the one before, it will have the same adjacency matrix\n\n\n\n\nLattice Adjacency Matrices\nWe need to introduce a system of order to the graph to make it more of a rigid grid. This is precisely why using a Lattice graph is so helpful in this case. Lattice graphs offer distinct coordinates, or lattices, which line up exactly with what we want to do with the chess squares because each squares is distinct and has 2-dimensional coordinates (i.e. the point (1,2) has an x dimension and a y dimension).\n\\[\n\\begin{gather*}\n\\begin{bmatrix}\n(1,1) & (1,2) & (1,3) \\\\\n(2,1) & (2,2) & (2,3) \\\\\n(3,1) & (3,2) & (3,3) \\\\\n\\end{bmatrix} \\\\\n\\text{Lattice Matrix}\n\\end{gather*}\n\\]\nJust as we made a adjacency matrix out of a normal graph, we can make a lattice adjacency matrix out of a lattice graph. For our purposes, lattice matrices are just regular matrices, but each entry in the matrix is representative of a lattice point (i.e. \\(A_{1,1} \\text{ is representative of the lattice point } (1,1)\\)).\nIn order to make a lattice adjacency matrix given \\(n \\times n\\) lattices, we will essentially construct a \\(n^2 \\times n^2\\) matrix. This comes from exactly what we did with the adjacency matrices; every single node was put across horizontally and vertically in order to have every pairs of connections between the nodes. Just in this case, since our grid has \\(n \\times n = n^2\\) lattices, it will be much larger. Essentially what we’re doing is making a long vector out of the lattice and then making that long vector 2D by taking the outer-product of 2 of long vectors.\n\\[\n\\begin{gather*}\n  \\begin{bmatrix}\n  1 & 2 & 3 \\\\\n  4 & 5 & 6 \\\\\n  7 & 8 & 9 \\\\\n  \\end{bmatrix}\n  \\longrightarrow\n  \\begin{bmatrix}\n  1 \\\\ 2 \\\\ 3 \\\\ 4 \\\\ 5 \\\\ 6 \\\\ 7 \\\\ 8 \\\\ 9 \\\\ \\end{bmatrix}\n  \\longrightarrow\n  \\begin{bmatrix}\n  &1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 \\\\\n  1 \\\\ 2 \\\\ 3 \\\\ 4 \\\\ 5 \\\\ 6 \\\\ 7 \\\\ 8 \\\\ 9 \\\\\n  \\end{bmatrix} \\\\\n  \\space\\space\\text{Lattice}\\space\\space\\space\\space\\space\\space\\space\\text{Long Vector}\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\text{2D Long Vector}\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\n\\end{gather*}\n\\]\n\n\nMaking the Lattice Adjacency Matrix\nNow that the matrix is made, we can use the 2D to 1D conversion formula: \\((\\text{row} -1) \\times \\text{row length} + \\text{column}\\). This helps streamline the process of actually assigning what squares are adjacent to one another when a knight jumps. For every single cell, we can just calculate the knight moves with a helper function and then assign them a 1 or 0 if they are adjacent.\nThe end result looks like this:\n\n\n\n\n\n\n\n\n\nNow, the reason why we wanted to go through all this trouble was because adjacency matrices are very useful for showing future movement from any starting point. This is done as easily as just exponentiating the adjacency matrix \\(A\\) to some degree \\(n\\). In doing so, from the basic properties of matrix multiplication, which we can see clearly using the matrix \\(A\\) from before and making \\(A^2\\) and zooming in on the results of node 2:\n\\[\n\\begin{equation*}\n\\begin{gathered}\n  A =\n  \\begin{bmatrix}\n  0 & 1 & 0 & 1 \\\\\n  1 & 0 & 0 & 1 \\\\\n  0 & 0 & 0 & 1 \\\\\n  1 & 1 & 1 & 0 \\\\\n  \\end{bmatrix}\n  \\\\[1em]\n  A \\times A =\n  \\begin{bmatrix}\n  \\cdot & \\color{red}{(0 \\cdot 1) + (1 \\cdot 0) + (0 \\cdot 0) + (1 \\cdot 1)} & \\cdot & \\cdot \\\\\n  \\cdot & \\color{red}{(1 \\cdot 1) + (0 \\cdot 0) + (0 \\cdot 0) + (1 \\cdot 1)} & \\cdot & \\cdot \\\\\n  \\cdot & \\color{red}{(0 \\cdot 1) + (0 \\cdot 0) + (0 \\cdot 0) + (1 \\cdot 1)} & \\cdot & \\cdot \\\\\n  \\cdot & \\color{red}{(1 \\cdot 1) + (1 \\cdot 0) + (1 \\cdot 0) + (0 \\cdot 1)} & \\cdot & \\cdot \\\\\n  \\end{bmatrix}\n  =\n  \\begin{bmatrix}\n  \\cdot & \\color{red}{1} & \\cdot & \\cdot \\\\\n  \\cdot & \\color{red}{2} & \\cdot & \\cdot \\\\\n  \\cdot & \\color{red}{1} & \\cdot & \\cdot \\\\\n  \\cdot & \\color{red}{1} & \\cdot & \\cdot \\\\\n  \\end{bmatrix}\n  \\\\[1em]\n  \\begin{array}{c c l}\n    \\textbf{Start} & \\textbf{Count} & \\textbf{Explanation} \\\\\n    1 & 1 & \\text{1 path from node 1 of } \\textcolor{green}{\\text{length }\\textbf{2}} \\text{ to node 2: } (1 → 4 → 2) \\\\\n    2 & 2 & \\text{2 paths from node 2 of } \\textcolor{green}{\\text{length }\\textbf{2}} \\text{ to node 2: } (2 → 1 → 2), (2 → 4 → 2) \\\\\n    3 & 1 & \\text{1 path from node 3 of } \\textcolor{green}{\\text{length }\\textbf{2}} \\text{ to node 2: } (3 → 4 → 2) \\\\\n    4 & 1 & \\text{1 path from node 4 of } \\textcolor{green}{\\text{length }\\textbf{2}} \\text{ to node 2: } (4 → 1 → 2) \\\\\n    \\end{array}\n\\end{gathered}\n\\end{equation*}\n\\]"
  },
  {
    "objectID": "projects/KnightTourVisual/app.html#shiny-app",
    "href": "projects/KnightTourVisual/app.html#shiny-app",
    "title": "Knight’s Tour Adjacency Matrix Visual",
    "section": "Shiny App",
    "text": "Shiny App"
  },
  {
    "objectID": "projects/capstonePortfolio/index.html",
    "href": "projects/capstonePortfolio/index.html",
    "title": "Housing Status Changes While in Substance Abuse Treatment (Senior Capstone)",
    "section": "",
    "text": "This project examines how individuals completing substance abuse treatment change—or fail to change—their housing status between admission and discharge. Using the national TEDS-D 2021 dataset, I focus on two groups: those unhoused at admission and those in independent living. The central question was: What distinguishes people whose housing status changes from those whose does not?\nI compared individuals who remained unhoused with those who transitioned into independent living, and also noting the small subset who became unhoused after living independently. Analyses were performed in R, with Python used for modeling (CatBoost, SHAP) and Tableau for visualization."
  },
  {
    "objectID": "projects/capstonePortfolio/index.html#catboostclassifier",
    "href": "projects/capstonePortfolio/index.html#catboostclassifier",
    "title": "Housing Status Changes in Substance Abuse Treatment",
    "section": "CatboostClassifier",
    "text": "CatboostClassifier\nCatBoost is a gradient boosting model (like LightGM and XGBoost) that has a special CatBoost target encoding that makes it shine above the others for this project. Its unique target encoding allows for more effective and efficient predictions with categorical data, which is the datatype of 97% of the columns.\n\nShap Values\n\n\n\n\n\n\n\nSHAP values give a little insight into how variables actually sway the classifier’s decision. In this plot, every dot is representative of one case, or one client. The further right a dot is, the higher probability of the client changing from unhoused to house is and vice versa. Since every dot is a single person, those humps are all people, so it is easy to spot that there are many groups in the variables. What is important to see is that there is a trend for these variables to leaning towards the right, with many large humps and tails being there. However, these variables aren’t just univariate and some have good sized humps on the left like in the case of State and Length of Stay. The next model gives insight into which models are more likely to be doing this."
  },
  {
    "objectID": "cv.html",
    "href": "cv.html",
    "title": "Resume",
    "section": "",
    "text": "Download Resume (PDF)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About Me",
    "section": "",
    "text": "Hello! My name is Miles Libbey (he/him). I am a recent Macalester College graduate with pursuits in Data Science, Psychology, Linguistics, and Political Science. I am passionate about focus on managing databases and transforming raw data into actionable insights. I enjoy working at the intersection of data engineering and analysis, ensuring that information is well-structured, reliable, and ready to reveal meaningful patterns. My most recent project was outside-of-class Linguistics research focusing on the dissimilarity of vocalic phonation distinctions across sex and gender with the department chair and a multi-disciplinary team of many students. This research is currently being prepared for publication, and it exemplifies my enthusiasm for applying data analysis in new and exciting contexts.\nI believe, like the authors of Freakonomics, that the world is full of data and questions to be explored, and with the right tools and methods, nearly anything can be delved into. This curiosity is what led me to Data Science in the first place—its promise of helping to uncover hidden stories within data, whether through cleaning, analysis, or visualization.\nI have a long history of working with non-profits, beginning in high school where I completed my goal of getting 168 hours (a week’s worth of time) in volunteer work to being a Development Intern at The Arc Minnesota just recently. Ultimately my goal is to hone my data skills so I can go back into the non-profit world and help to create real progress in any way I can.\nYou can find my resume here"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "About Me",
    "section": "Education",
    "text": "Education\n\nB.A. in Data Science | Macalester College 2021 - 2025 | St. Paul, MN"
  },
  {
    "objectID": "CV.html",
    "href": "CV.html",
    "title": "Curriculum Vitae",
    "section": "",
    "text": "Download Resume (PDF)"
  },
  {
    "objectID": "projects/LonelinessProject/index.html#overview",
    "href": "projects/LonelinessProject/index.html#overview",
    "title": "Loneliness Project",
    "section": "",
    "text": "This project started as a project as part of the course, “Language in Social Media: A Computational Linguistics Perspective” taught by Zuoyu Tian, who was a great source of support in this project. The group consisted of Elan Levin, Sylvain Zong-Nabia, and myself. Our team set out to explore a pressing question:\n“Is loneliness becoming normalized among young people in the digital age?”\nWe combined computational methods, sentiment analysis, and topic modeling to analyze thousands of social media posts from Reddit. Our findings shed light on how loneliness is not only experienced but also culturally discussed and potentially normalized. I went on individually to expand on the project and refine some of the aspects we didn’t have time to address due to our heavy workloads in the final months of university."
  },
  {
    "objectID": "projects/LonelinessProject/index.html#motivation",
    "href": "projects/LonelinessProject/index.html#motivation",
    "title": "Loneliness Project",
    "section": "Motivation",
    "text": "Motivation\nLoneliness has become a growing concern among digital-native youth. While social media promises connectivity, it often fosters superficial interactions, comparison, and emotional withdrawal. Prior research shows clear links between social media and mental health challenges like anxiety and depression — but much less attention has been paid to whether loneliness itself is becoming normalized and how people are approaching it. We aimed to fill that gap."
  },
  {
    "objectID": "projects/LonelinessProject/index.html#dataset",
    "href": "projects/LonelinessProject/index.html#dataset",
    "title": "Loneliness Project",
    "section": "Dataset",
    "text": "Dataset\n\nSource: FIG-Loneliness dataset (Jiang et al., 2022)\nPosts: 5,633 total (2,633 labeled “lonely,” 3,000 “non-lonely”)\nFocus: We analyzed 1,840 posts labeled as “lonely”\nSubreddits: r/loneliness, r/lonely, r/youngadults, r/college\nAnnotations: Human-labeled categories (duration, context, coping strategies)"
  },
  {
    "objectID": "projects/LonelinessProject/index.html#methodology",
    "href": "projects/LonelinessProject/index.html#methodology",
    "title": "Loneliness Project",
    "section": "Methodology",
    "text": "Methodology\nWe combined human annotation and LLM-assisted classification:\n\nCustom Sentiment Schema\n\nOptimistic: hopeful about change\nNeutral: no clear outlook\nPessimistic: hopeless, defeated\n\n✦ Later I experimented with a continuous scale of [0,1] to tease out more nuance\nAnnotation & Agreement\n\nThree human annotators established baseline inter-rater agreement (Krippendorff’s α = 0.74)\n\nLLM-Assisted Scaling\n\nUsed Google Gemini 2.0 Flash to label the full dataset\nEvaluated with accuracy, precision, recall, and F1\n\nDeeper Analysis\n\nRan LDA topic modeling to identify recurring themes\nApplied 3 pretrained Hugging Face depression classifiers to map sentiment → depression severity"
  },
  {
    "objectID": "projects/LonelinessProject/index.html#results",
    "href": "projects/LonelinessProject/index.html#results",
    "title": "Loneliness Project",
    "section": "Results",
    "text": "Results\n\nPessimism Dominates: Most posts about loneliness were pessimistic; optimism was rare\nLLM Accuracy: Gemini achieved ~70% accuracy on test annotations, especially strong at detecting pessimistic posts (may be due to the former point)\nTopic Modeling:\n\nTopic 0: direct discussions of loneliness, strongly pessimistic\nTopic 1: college life & friendships, also pessimistic\nTopic 3: slightly more room for neutral discussions\n\nDepression Models: Even “optimistic” posts showed strong associations with depression categories, suggesting that loneliness remains tied to negative mental health outcomes regardless of outlook"
  },
  {
    "objectID": "projects/LonelinessProject/index.html#key-takeaways",
    "href": "projects/LonelinessProject/index.html#key-takeaways",
    "title": "Loneliness Project",
    "section": "Key Takeaways",
    "text": "Key Takeaways\n\nNormalization? Our findings suggest loneliness is not normalized in a neutral sense — instead, it remains largely experienced as negative, isolating, and emotionally heavy\nMethods Matter: Annotating loneliness sentiment proved challenging, even for humans. LLMs can help scale annotation, but interpretation requires caution\nFuture Directions:\n\nExplore fine-grained loneliness categories (duration, coping)\nCompare across age groups\nExtend to other platforms beyond Reddit"
  },
  {
    "objectID": "projects/LonelinessProject/index.html#my-contributions",
    "href": "projects/LonelinessProject/index.html#my-contributions",
    "title": "Loneliness Project",
    "section": "My Contributions",
    "text": "My Contributions\n\nDesigned the sentiment annotation schema\nCoordinated the human annotation process and evaluated inter-rater agreement\nImplemented LLM-assisted annotation pipeline with Google’s Gemini API\nConducted LDA topic modeling and analyzed cross-topic sentiment trends\nInterpreted outputs from Hugging Face depression models to connect loneliness with broader mental health themes"
  },
  {
    "objectID": "projects/LonelinessProject/index.html#skills-showcased",
    "href": "projects/LonelinessProject/index.html#skills-showcased",
    "title": "Loneliness Project",
    "section": "Skills Showcased",
    "text": "Skills Showcased\nSkills demonstrated: · Natural Language Processing (NLP) · Annotation schema design & evaluation · Pseudo-labeling · Topic modeling (LDA) · Sentiment analysis & depression detection · Data storytelling & research synthesis"
  },
  {
    "objectID": "projects/LonelinessProject/index.html#references",
    "href": "projects/LonelinessProject/index.html#references",
    "title": "Loneliness Project",
    "section": "References",
    "text": "References\nÇıtak (ensarcitak), Ensar. “Ensarcitak/Dilbazlar-Multilabel-Depression-Anxiety-Detection-Model-Acc-91 · Hugging Face.” Huggingface.co, 2019, huggingface.co/ensarcitak/dilbazlar-multilabel-depression-anxiety-detection-model-acc-91. Accessed 10 May 2025.\nGuntuku, S. C., Yaden, D. B., Kern, M. L., Ungar, L. H., & Eichstaedt, J. C. (2017). Detecting depression and mental illness on social media: an integrative review. Current Opinion in Behavioral Sciences, 18, 43-49.\nJiang, Y., Jiang, Y., Leqi, L., & Winkielman, P. (2022). Many Ways to Be Lonely: Fine-Grained Characterization of Loneliness and Its Potential Changes in COVID-19. Proceedings of the International AAAI Conference on Web and Social Media, 16(1), 405-416. Retrieved from https://ojs.aaai.org/index.php/ICWSM/article/view/19302\nKhalaf, A. M., Alubied, A. A., Khalaf, A. M., Rifaey, A. A., Alubied, A., & Rifaey, A. (2023). The impact of social media on the mental health of adolescents and young adults: a systematic review. Cureus, 15(8).\nKoh, J. Y., McAleer, S., Fried, D., & Salakhutdinov, R. (2024). Tree search for language model agents. arXiv preprint arXiv:2407.01476.\nPark, H. W., Park, S., & Chong, M. (2020). Conversations and medical news frames on Twitter: Infodemiological study on COVID-19 in South Korea. Journal of medical internet research, 22(5), e18897.\nPoudel, A. (2024). Sentiment Classifier for Depression. Retrieved from https://huggingface.co/poudel/sentiment-classifier\nRafał Poświata and Michał Perełkiewicz. 2022. OPI@LT-EDI-ACL2022: Detecting Signs of Depression from Social Media Text using RoBERTa Pre-trained Language Models. In Proceedings of the Second Workshop on Language Technology for Equality, Diversity and Inclusion, pages 276–282, Dublin, Ireland. Association for Computational Linguistics.\nTwenge, J. M. (2019). More time on technology, less happiness? Associations between digital-media use and psychological well-being. Current Directions in Psychological Science, 28(4), 372-379."
  },
  {
    "objectID": "projects/KnightTourVisual/index.html",
    "href": "projects/KnightTourVisual/index.html",
    "title": "Knight’s Tour Adjacency Matrix Visual",
    "section": "",
    "text": "Below you will find a Shiny App made for fun using concepts learned in Linear Algebra and Computational Linear Algebra, most notably graphs, adjacency matrices, matrix exponentiation, and Markov chains. All of the key concepts used to build the app are explained if you are interested in learning what is going on behind the scenes."
  },
  {
    "objectID": "projects/KnightTourVisual/index.html#shiny-app",
    "href": "projects/KnightTourVisual/index.html#shiny-app",
    "title": "Knight’s Tour Adjacency Matrix Visual",
    "section": "Shiny App",
    "text": "Shiny App"
  },
  {
    "objectID": "projects/KnightTourVisual/index.html#the-math-behind-the-app",
    "href": "projects/KnightTourVisual/index.html#the-math-behind-the-app",
    "title": "Knight’s Tour Adjacency Matrix Visual",
    "section": "The Math Behind the App",
    "text": "The Math Behind the App\n\nAdjacency Matrices\nAn adjacency matrix is a type of matrix used to represent a mathematical graph, as pictured below:\n\n\n\n\n\n\nFig. 1\n\n\n\nThe matrix shows which vertices in a graph are adjacent to one another and which are not. It can be thought of as this: the rows are the starting points and the columns are the ending points. If you can get from a starting point to an ending point, then a 1 is placed, and otherwise it is 0.\n\\[\nA =\n\\begin{bmatrix}\n0 & 1 & 0 & 1 \\\\\n1 & 0 & 0 & 1 \\\\\n0 & 0 & 0 & 1 \\\\\n1 & 1 & 1 & 0 \\\\\n\\end{bmatrix}\n\\]\nFor example, in our graph, 2 and 4 are connected. If you look in the 2nd row (the starting place) and then at the 4th column (the ending place), you will see that there is a 1. Conversely, if you look at \\(A_{2,3}\\), you will see that it is 0, meaning 2 and 3 are unconnected, which can be confirmed by looking at the graph. These types of matrices are always square \\(n \\times n\\) matrices because the same vertices are shown in both the rows and the columns. How this relates to a knight is as follows: if you imagine the 64 squares on a chessboard as vertices, we can graph the connecting vertices to show what the knight can reach in one move (later on, we will extend this to multiple moves, but we are not there yet).\nHowever, chess squares have fixed positions. In this graph, 1 could be placed to the right of 4 and it would not matter, as seen below.\n\n\n\nFig. 2: There is no difference between this graph and the one before, it will have the same adjacency matrix\n\n\n\n\nLattice Adjacency Matrices\nWe need to introduce a system of order to the graph to make it more of a rigid grid. This is precisely why using a Lattice graph is so helpful in this case. Lattice graphs offer distinct coordinates, or lattices, which line up exactly with what we want to do with the chess squares because each square is distinct and has 2-dimensional coordinates (i.e. the square (1, 2) has an x dimension and a y dimension).\n\\[\n\\begin{gather*}\n\\begin{bmatrix}\n(1,1) & (1,2) & (1,3) \\\\\n(2,1) & (2,2) & (2,3) \\\\\n(3,1) & (3,2) & (3,3) \\\\\n\\end{bmatrix} \\\\\n\\text{Lattice Matrix}\n\\end{gather*}\n\\]\nJust as we made an adjacency matrix from a normal graph, we can make a lattice adjacency matrix from a lattice graph. For our purposes, lattice matrices are just regular matrices, but each entry in the matrix represents a lattice point (i.e., \\(A_{1,1}\\) represents the lattice point \\((1,1)\\)).\nIn order to make a lattice adjacency matrix given \\(n \\times n\\) lattices, we will essentially construct an \\(n^2 \\times n^2\\) matrix. This comes directly from what we did with the adjacency matrices; every single node was placed both horizontally and vertically in order to show every pair of connections between the nodes. In this case, since our grid has \\(n \\times n = n^2\\) lattices, the matrix will be much larger. Essentially, what we are doing is making a long vector out of the lattice and then making that long vector 2D by taking the outer product of two long vectors.\n\\[\n\\begin{gather*}\n  \\begin{bmatrix}\n  \\textcolor{red}{1} & \\textcolor{red}{2} & \\textcolor{red}{3} \\\\\n  \\textcolor{blue}{4} & \\textcolor{blue}{5} & \\textcolor{blue}{6} \\\\\n  \\textcolor{green}{7} & \\textcolor{green}{8} & \\textcolor{green}{9} \\\\\n  \\end{bmatrix}\n  \\longrightarrow\n  \\begin{bmatrix}\n  \\textcolor{red}{1} \\\\ \\textcolor{red}{2} \\\\ \\textcolor{red}{3} \\\\ \\textcolor{blue}{4} \\\\ \\textcolor{blue}{5} \\\\ \\textcolor{blue}{6} \\\\ \\textcolor{green}{7} \\\\ \\textcolor{green}{8} \\\\ \\textcolor{green}{9} \\\\ \\end{bmatrix}\n  \\longrightarrow\n\\begin{bmatrix}  1 \\\\ 2 \\\\ 3 \\\\ 4 \\\\ 5 \\\\ 6 \\\\ 7 \\\\ 8 \\\\ 9 \\\\ \\end{bmatrix}\n\\begin{bmatrix} 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 \\end{bmatrix}\n  \\longrightarrow\n  \\begin{bmatrix}\n  &1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 \\\\\n  1 \\\\ 2 \\\\ 3 \\\\ 4 \\\\ 5 \\\\ 6 \\\\ 7 \\\\ 8 \\\\ 9 \\\\\n  \\end{bmatrix} \\\\\n  \\space\\space\\text{Lattice}\\space\\space\\space\\space\\space\\space\\space\\text{Long Vector}\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\text{Outer Product}\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\text{2D Long Vector}\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\n\\end{gather*}\n\\]\n\n\nMaking the Lattice Adjacency Matrix\nNow that the matrix is made, we can use the 2D to 1D conversion formula: \\((\\text{row} -1) \\times \\text{row length} + \\text{column}\\). This helps streamline the process of actually assigning what squares are adjacent to one another when a knight jumps. For every single cell, we can just calculate the knight moves with a helper function and then assign them a 1 or 0 if they are adjacent.\nThe end result looks like this:\n\n\n\n\n\n\n\n\n\nNow, the reason why we wanted to go through all this trouble was because adjacency matrices are very useful for showing future movement from any starting point. This is done as easily as just exponentiating the adjacency matrix \\(A\\) to some degree \\(n\\). In doing so, from the basic properties of matrix multiplication, we can determine all of the possible paths of length \\(n\\) that start and end anywhere. For example, by taking the matrix \\(A\\) from before (representative of Graph 1.), computing \\(A^2\\), and zooming in on the results for the paths that end at node 2 after 2 walks, we can see this clearly:\n\\[\n\\begin{equation*}\n\\begin{gathered}\n  A =\n  \\begin{bmatrix}\n  0 & 1 & 0 & 1 \\\\\n  1 & 0 & 0 & 1 \\\\\n  0 & 0 & 0 & 1 \\\\\n  1 & 1 & 1 & 0 \\\\\n  \\end{bmatrix}\n  \\\\[1em]\n  A \\times A =\n  \\begin{bmatrix}\n  \\cdot & \\color{red}{(0 \\cdot 1) + (1 \\cdot 0) + (0 \\cdot 0) + (1 \\cdot 1)} & \\cdot & \\cdot \\\\\n  \\cdot & \\color{red}{(1 \\cdot 1) + (0 \\cdot 0) + (0 \\cdot 0) + (1 \\cdot 1)} & \\cdot & \\cdot \\\\\n  \\cdot & \\color{red}{(0 \\cdot 1) + (0 \\cdot 0) + (0 \\cdot 0) + (1 \\cdot 1)} & \\cdot & \\cdot \\\\\n  \\cdot & \\color{red}{(1 \\cdot 1) + (1 \\cdot 0) + (1 \\cdot 0) + (0 \\cdot 1)} & \\cdot & \\cdot \\\\\n  \\end{bmatrix}\n  =\n  \\begin{bmatrix}\n  \\cdot & \\color{red}{1} & \\cdot & \\cdot \\\\\n  \\cdot & \\color{red}{2} & \\cdot & \\cdot \\\\\n  \\cdot & \\color{red}{1} & \\cdot & \\cdot \\\\\n  \\cdot & \\color{red}{1} & \\cdot & \\cdot \\\\\n  \\end{bmatrix}\n  \\\\[1em]\n  \\begin{array}{c c l}\n    \\textbf{Start} & \\textbf{Count} & \\textbf{Explanation} \\\\\n    1 & 1 & \\text{1 path from node 1 of } \\textcolor{red}{\\text{length }\\textbf{2}} \\text{ to node 2} \\\\\n    2 & 2 & \\text{2 paths from node 2 of } \\textcolor{blue}{\\text{length }\\textbf{2}} \\text{ to node 2}\\\\\n    3 & 1 & \\text{1 path from node 3 of } \\textcolor{green}{\\text{length }\\textbf{2}} \\text{ to node 2}\\\\\n    4 & 1 & \\text{1 path from node 4 of } \\textcolor{purple}{\\text{length }\\textbf{2}} \\text{ to node 2}\\\\\n    \\end{array}\n\\end{gathered}\n\\end{equation*}\n\\]\n\n\n\n\n\n\n\nFig. 3: All of the paths extending to node 2 with 2 edges, as representative of col. 2 of \\(A^2\\)\n\n\nHere it can clearly be seen that, just as before, when we look at the column 2, we find all of the nodes that have a connection with node 2, but this time it is if they have a path of 2 walks (from raising \\(A\\) to \\(n = 2\\)). This allows for there to be more numbers than just 0 and 1 as it’s possible that nodes have 2 ways to get to node 2 in 2 moves, just like in the case of node 2.\nAnd there is no limit on how high the exponent can go– meaning that if it weren’t for computation time or the bigger inhibitor of digit space, the shiny app can display thousands of moves into the future.\n\n\nWhat It All Means\nWhile this project may not be the most practical application, the patterns that emerge in the app highlight broadly useful concepts from linear algebra. If you interact with the app long enough, you will notice that certain squares — particularly the central squares — consistently have the highest count or probability of the knight landing on them. This behavior mirrors the idea of eigenvalues in a matrix, which predict long-term behavior: in this case, how the tiles’ ‘popularity’ evolves after multiple moves. Eigenvalues essentially tell us the dominant patterns of movement that emerge after many iterations, with higher eigenvalues corresponding to squares that are more likely to be landed on.\nIn some setups, there is a switch between light squares dominating or dark squares dominating depending on whether the exponent is odd or even. This is a result of the bipartite nature of the board: the board can be divided into two distinct sets of squares (light and dark), and squares within each set are not connected to others of the same set. This property is crucial because it suggests that the eigenvalues of the matrix governing the knight’s movement are symmetric around zero. Specifically, for matrices with this symmetry, we have \\(\\lambda \\times m = -\\lambda \\times m\\), which explains why odd and even powers of the matrix lead to such different behaviors. The switch between the odd and even powers of the matrix helps to explain the shifting dominance of the squares. When we raise the matrix to odd powers, the behavior tends to favor one set (either light or dark squares), while raising it to even powers leads to a more balanced or alternating pattern, as the symmetry of the eigenvalues becomes more apparent.\nAdjacency matrices can be very powerful tools, helping with topics such as the spread of infectious disease, Google’s PageRank, and weather forecast."
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "Quarto Playground",
    "section": "References",
    "text": "References\n\nCustom\n\n\n\n[\n\n\nSomething 1\n\n\n\nThis is Something 1.\nThis is my ref 1.\nThis is 1."
  },
  {
    "objectID": "projects/capstonePortfolio/index.html#catboost-models",
    "href": "projects/capstonePortfolio/index.html#catboost-models",
    "title": "Housing Status Changes While in Substance Abuse Treatment (Senior Capstone)",
    "section": "CatBoost Models",
    "text": "CatBoost Models\nCatBoost is a gradient boosting model (like LightGM and XGBoost) that has a special CatBoost target encoding that makes it shine above the others for this project. Its unique target encoding allows for more effective and efficient predictions with categorical data, which is the datatype of 97% of the columns.\n\nUnhoused ModelIndependent Living Model\n\n\n\n\n\n\n\n\nCatBoost Unhoused Model Scaffolding\n\n\n\n\n\n\nCode:\nteds_Unhoused = teds[teds[\"LIVARAG\"] == 1] # just people who start as unhoused\nteds_Unhoused = teds_Unhoused.drop(columns = \"LIVARAG\")\n\nX = teds_Unhoused.drop(columns=[\"LIVARAG_delta\"]) \nX = X.astype(str)\ny = teds_Unhoused[\"LIVARAG_delta\"] \n\ntrain_pool = Pool(X, label=y, cat_features=X.columns.tolist())\n\nmodelUnhoused = CatBoostClassifier(iterations=700, # after a lot of hyper-parameter tuning, \n                           depth=8,                  these were the best\n                           learning_rate=0.2, \n                           loss_function='Logloss', \n                           eval_metric='AUC', \n                           verbose=70)\n\nmodelUnhoused.fit(train_pool)\n\n\nMetrics:\n\n\n\nFeature importance results show that state-level variation is the strongest predictor of remaining unhoused, followed by frequency of substance use, length of stay, and treatment type. These findings highlight the combined influence of structural factors and individual behaviors on housing outcomes.\n\n\n\n\nConfusion Matrix:\n\n\n\n\n\n\n\n\n\n\nResults (Click image for feature importance insights)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCatBoost Independent Living Model Scaffolding\n\n\n\n\n\n\nCode:\nteds_Independent = teds[teds[\"LIVARAG\"] == 3] # just people who came in as living independently\nteds_Independent = teds_Independent.drop(columns = \"LIVARAG\")\n\nX2 = teds_Independent.drop(columns=[\"LIVARAG_delta\"]) # predictors\nX2 = X2.astype(str)\ny2 = teds_Independent[\"LIVARAG_delta\"]\n\nRUS = RandomUnderSampler(sampling_strategy=0.1, random_state=8675309) \nX2, y2 = RUS.fit_resample(X2, y2) # generating a few cases for minority class\n\ntrain_pool2 = Pool(X2, label=y2, cat_features=X2.columns.tolist())\n\nmodelIndependent = CatBoostClassifier(iterations=600, \n                            depth=6, \n                            learning_rate=0.2, \n                            loss_function='Logloss', \n                            eval_metric='AUC',\n                            verbose=60)\n\nmodelIndependent.fit(train_pool2)\n\n\nMetrics:\n\n\n\n\n\n\n\nConfusion Matrix:\n\n\n\n\n\n\n\n\n\n\nResults (Click image for feature importance insights)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{Click image to see breakdown by housing at admission} The predicted probabilities from both Averaged CatBoost predictions by state: Southeast and South-Central states show low transition rates into housing but high retention once independent. The Midwest shows the reverse. Montana and West Virginia are notable outliers.\n\n\n\n\nPrediction Takeaways\n\nChange is predictable – CatBoost models strongly predict housing change, linking client and treatment attributes to short-term outcomes.\n\nState matters most – State of treatment dominates importance rankings, likely reflecting policies, housing availability, funding, and reporting practices.\n\nEmployment matters – Employment at admission and discharge is critical for housing outcomes.\n\nSubstance use frequency – Frequency of use in the week before discharge is highly predictive."
  },
  {
    "objectID": "projects/capstonePortfolio/index.html#multiple-correspondence-analysis",
    "href": "projects/capstonePortfolio/index.html#multiple-correspondence-analysis",
    "title": "Housing Status Changes in Substance Abuse Treatment (Senior Capstone)",
    "section": "Multiple Correspondence Analysis",
    "text": "Multiple Correspondence Analysis\n\nUnhoused ModelIndependent Model\n\n\n\nEvidentally, certain states and shorter / longer stays have the most bearing on if someone will stay houseless or go into a form of solid housing. What’s more, alcohol intoxication and substance-induced disorders, 2 of the most common and coinciding disorders are strongly related to staying unhoused.\n\n\n\nDrug type significantly influences likelihood of independent living at discharge. Individuals with cannabis or alcohol-related disorders tend to have more favorable outcomes than those with harder substances such as cocaine or barbiturates (Substance Abuse / Chemical Dependency, 2024).\n\n\n\nWhile there are key differences between the two groups, several consistent trends emerge:\nState remains highly influential – The most impactful variable by far, with strong associations in both supporting and opposing housing stability.\nEffective treatment characteristics – Longer stays, residential/rehab programs (as opposed to short-term detox), and participation in self-help groups at discharge are linked to better housing outcomes.\nAge has minimal impact – With the exception of ages 18–20, age shows little to no correlation with housing stability.\nIndependent psychiatric disorders show no effect – Conditions not caused by substance use (e.g., ADHD, bipolar disorder) do not significantly influence housing outcomes.\nCertain substances harm stability – Use of specific drugs, particularly among those who begin with stable housing, is associated with negative outcomes."
  },
  {
    "objectID": "projects/NonProfitMapper/TOINCLUDEINFUTURE.html",
    "href": "projects/NonProfitMapper/TOINCLUDEINFUTURE.html",
    "title": "Nonprofit Leaflet",
    "section": "",
    "text": "Nonprofit Mapper"
  },
  {
    "objectID": "projects/capstonePortfolio/index.html#the-importance-of-state-and-drugs-multiple-correspondence-analysis",
    "href": "projects/capstonePortfolio/index.html#the-importance-of-state-and-drugs-multiple-correspondence-analysis",
    "title": "Housing Status Changes While in Substance Abuse Treatment (Senior Capstone)",
    "section": "The Importance of State and Drugs (Multiple Correspondence Analysis)",
    "text": "The Importance of State and Drugs (Multiple Correspondence Analysis)\nMultiple Correspondence Analysis (MCA) is a statistical technique used to analyze and visualize relationships within categorical data. By reducing data with many features / dimensions into a lower-dimensional space, MCA helps identify patterns, associations, and underlying structures that might not be immediately obvious. It’s particularly useful for revealing granular relationships between the specific levels of categorical variables.\n\nUnhoused ModelIndependent Model\n\n\n\n\n\n\n\nEvidently, certain states and treatment duration strongly influence housing outcomes. What’s more, alcohol intoxication and substance-induced disorders are associated with remaining unhoused.\n\n\n\n\n\n\n\nDrug type significantly influences likelihood of independent living at discharge. Individuals with cannabis or alcohol-related disorders tend to have more favorable outcomes than those with harder substances such as cocaine or barbiturates (Substance Abuse / Chemical Dependency, 2024).\n\n\n\n\nConsistent Trends Across Groups\n\nState influence is dominant – Strong associations in both supporting and opposing stability.\nEffective treatment – Longer stays, residential programs, and self-help participation improve outcomes.\nAge minimal – Except ages 18–20, age has little effect.\nPsychiatric disorders negligible – Only substance use disorders impact housing.\nCertain substances harmful – Some drugs, especially among initially housed individuals, increase risk."
  },
  {
    "objectID": "projects/capstonePortfolio/index.html#research-question",
    "href": "projects/capstonePortfolio/index.html#research-question",
    "title": "Housing Status Changes While in Substance Abuse Treatment (Senior Capstone)",
    "section": "",
    "text": "What distinguishes people whose housing status changes from those whose does not?\n\nI compared individuals who remained unhoused with those who transitioned into independent living, and also noting the small subset who became unhoused after living independently. Analyses were performed in R, with Python used for modeling (CatBoost, SHAP) and Tableau for visualization."
  },
  {
    "objectID": "projects/capstonePortfolio/index.html#what-distinguishes-people-whose-housing-status-changes-from-those-whose-does-not",
    "href": "projects/capstonePortfolio/index.html#what-distinguishes-people-whose-housing-status-changes-from-those-whose-does-not",
    "title": "Housing Status Changes While in Substance Abuse Treatment (Senior Capstone)",
    "section": "",
    "text": "I compared individuals who remained unhoused with those who transitioned into independent living, and also noting the small subset who became unhoused after living independently. Analyses were performed in R, with Python used for modeling (CatBoost, SHAP) and Tableau for visualization."
  }
]