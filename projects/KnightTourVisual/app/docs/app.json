[{"name":"app.R","content":"shinylive::export(appdir = \".\", destdir = \"docs\")\n\nlibrary(tidyverse)\nlibrary(Matrix)\nlibrary(purrr)\nlibrary(expm)\nlibrary(grid)\nlibrary(ggplot2)\nlibrary(stringr)\nlibrary(shiny)\nlibrary(rsconnect)\n\n'%notin%' <- Negate('%in%')\n\ngenerate_combinations <- function(ops, nums) {\n  # Convert to numeric if character\n  nums <- as.numeric(nums)\n  \n  # Generate all permutations of numbers\n  permute <- function(v) {\n    if (length(v) == 1) return(list(v))\n    out <- list()\n    for (i in seq_along(v)) {\n      rest <- v[-i]\n      for (p in permute(rest)) {\n        out <- append(out, list(c(v[i], p)))\n      }\n    }\n    return(out)\n  }\n  \n  # Parse operations into functions\n  parse_op <- function(op_string) {\n    if (op_string == \"+\") {\n      return(function(x) x)\n    } else if (op_string == \"-\") {\n      return(function(x) -x)\n    } else if (grepl(\"^\\\\^\", op_string)) {\n      n <- as.numeric(sub(\"^\\\\^\", \"\", op_string))\n      return(function(x) x^n)\n    } else if (grepl(\"^/\", op_string)) {\n      n <- as.numeric(sub(\"^/\", \"\", op_string))\n      return(function(x) x / n)\n    } else {\n      stop(paste(\"Unknown operation:\", op_string))\n    }\n  }\n  \n  # Convert all ops to functions\n  op_funcs <- lapply(ops, parse_op)\n  \n  # Get all combinations of operations (each element gets an op)\n  op_combos <- expand.grid(rep(list(seq_along(op_funcs)), length(nums)))\n  \n  # Generate number permutations\n  num_perms <- permute(nums)\n  \n  result <- list()\n  \n  for (perm in num_perms) {\n    for (i in 1:nrow(op_combos)) {\n      indices <- as.integer(op_combos[i, ])\n      funcs <- op_funcs[indices]\n      transformed <- mapply(function(f, x) f(x), funcs, perm)\n      result <- append(result, list(transformed))\n    }\n  }\n  \n  return(result)\n}\n\n# generate_combinations(c(\"+\", \"-\"), c(1, 2))\nmakeKnightMoves <- function(position, board_dims = c(8,8)) {\n  position <- as.numeric(position)\n  numRows <- board_dims[1]\n  numCols <- board_dims[2]\n  \n  ifValid <- function(placement) {\n    rowInBounds <- placement[1] >= 1 && placement[1] <= numRows\n    colInBounds <- placement[2] >= 1 && placement[2] <= numCols\n    return(rowInBounds && colInBounds)\n  }\n  \n  # Validate input\n  if (!ifValid(position)) {\n    stop(\"Please enter values within board dimensions\")\n  }\n  \n  movesList <- lapply(generate_combinations(c(\"+\", \"-\"), c(1, 2)), function(a){\n    newPosition <- c(position[1] + a[1], position[2] + a[2])\n    if (ifValid(newPosition)) {\n      return(newPosition)\n    } else {\n      return(NULL)\n    }\n  })\n  \n  return(compact(movesList))\n}\n\nmakeKnightMoves(c(8,7), c(8,7))\n\n#1\\space\\space\\space\\space 2\\space\\space\\space\\space3\\space\\space\\space\\space4\\\\\nmakeLatticeAdjMatrix <- function(numRow = 8, numCol = 8) {\n  cellTotal <- numRow * numCol\n  A <- matrix(0, nrow = cellTotal, ncol = cellTotal)\n  index_from_coords <- function(row, col) {\n    return((row - 1) * numCol + col)\n  }\n  \n  for (rowIndex in 1:numRow) {\n    for (colIndex in 1:numCol) {\n      from_index <- index_from_coords(rowIndex, colIndex)\n      moves <- makeKnightMoves(c(rowIndex, colIndex), board_dims = c(numRow, numCol))\n      for (move in moves) {\n        moveRow <- move[1]\n        moveCol <- move[2]\n        \n        if (moveRow <= numRow && moveCol <= numCol) { # if it's in the board\n          to_index <- index_from_coords(moveRow, moveCol)\n          A[from_index, to_index] <- 1\n          A[to_index, from_index] <- 1  # undirected\n        }\n      }\n    }\n  }\n  \n  # return(as(A, \"sparseMatrix\"))\n  return(A)\n}\n\nplotKnightFromMatrix <- function(position = c(1, 1), nrows = 8, ncols = 8, exponent = 1, showPathsToExponent = FALSE, probability = FALSE) {\n  \n  if (length(position) != 2 || \n      !all(position >= 1) || \n      position[1] > nrows || \n      position[2] > ncols) {\n    stop(\"Position must be within the board dimensions\")\n  }\n  \n  A <- makeLatticeAdjMatrix(nrows, ncols)\n  \n  if(showPathsToExponent && exponent != 1) {\n    ATotal <- A\n    for (i in 2:exponent) {\n      ATotal <- ATotal + A %^% i\n      \n    }\n    A <- ATotal\n  } else {\n    A <- A %^% exponent # exponentiating\n  }\n  \n  # Convert origin to matrix index\n  origin_index <- (position[1] - 1) * ncols + position[2]\n  path_counts <- A[origin_index, ]\n  \n  # Map index â†’ coordinates\n  grid <- expand.grid(x = 1:ncols, y = 1:nrows)\n  grid$index <- (grid$y - 1) * ncols + grid$x\n  grid$paths <- path_counts[grid$index]\n  \n  cutOff = 5\n  if (probability) {\n    grid <- grid %>%\n      mutate(totalPaths = sum(paths),\n             paths = paths / totalPaths)\n  }\n  grid <- grid %>%\n    mutate(numDigits = ifelse(str_detect(paths, \"^0\\\\.\"), \n                              nchar(paths) - 3,\n                              nchar(paths)),\n           pathsFormatted = ifelse(numDigits %notin% c(0:cutOff),\n                                   format(signif(paths, 3), scientific = TRUE), \n                                   paths))\n  \n  # Label the origin\n  grid$Type <- ifelse(grid$index == origin_index, \"Origin\", \"Other\")\n  origin_tile <- grid %>% filter(Type == \"Origin\")\n  \n  knightImage <- png::readPNG(\"knightImage.png\")\n  knightGrob <- rasterGrob(knightImage, interpolate = TRUE)\n  \n  readable = 16\n  # Plot\n  ggplot(grid, aes(x = x, y = y, fill = paths)) +\n    geom_tile(color = \"grey60\") +\n    annotation_custom(\n      knightGrob,\n      xmin = origin_tile$x - 0.5,\n      xmax = origin_tile$x + 0.5,\n      ymin = origin_tile$y - 0.5,\n      ymax = origin_tile$y + 0.5\n    ) +\n    scale_fill_gradient(name = \"# of Paths\", low = \"white\", high = \"firebrick\", na.value = \"white\") +\n    scale_x_continuous(breaks = 1:ncols, minor_breaks = NULL) + \n    scale_y_continuous(breaks = 1:nrows, minor_breaks = NULL) + \n    geom_text(aes(label = ifelse(paths > 0, pathsFormatted, \"\")), \n              color = \"black\", \n              size = ifelse(grid$numDigits <= 3, \n                            5, \n                            ifelse(grid$numDigits > cutOff, \n                                   4, \n                                   4.5))\n    ) +\n    coord_fixed() +\n    labs(title = str_c(\"Possible Knight Moves after \", exponent,\" \", ifelse(exponent == 1, \"Jump\", \"Consecutive Jumps\"))) +\n    guides(fill = guide_colorbar(barwidth = 25, barheight = 3)) + \n    theme_minimal() +\n    theme(legend.position = \"bottom\",\n          axis.title = element_blank(),\n          axis.ticks.length = unit(0, \"pt\"),\n          axis.ticks = element_blank(),\n          panel.grid = element_blank(),\n          axis.text.x = element_text(size = 16, margin = margin(t = -5)),\n          axis.text.y = element_text(size = 16, margin = margin(r = -5)),\n          plot.title = element_text(size = readable+5, margin = margin(b = -10)),\n          legend.text = element_text(size = readable-1),\n          legend.title = element_text(size = readable+2)\n    )\n}\n# plotKnightFromMatrix(c(6,5), 8, 6, exponent = 1, showPathsToExponent = TRUE, probability = TRUE)\n\nui <- fluidPage(\n  sidebarLayout( # all of the input bars\n    sidebarPanel(\n      div(\n        style = \"font-size: 24px; font-weight: bold; margin-top: 0px;\",\n        textOutput(\"textBox\")\n      ),\n      sliderInput(\"exponent\", # id\n                  label = \"Choose # of Consecutive Jumps\",\n                  min = 1,\n                  max = 25,\n                  value = 1,\n                  step = 1),\n      sliderInput(\"rows\",\n                  label = \"# of Rows\",\n                  min = 2,\n                  max = 8,\n                  value = 8,\n                  step = 1),\n      sliderInput(\"cols\",\n                  label = \"# of Columns\",\n                  min = 2,\n                  max = 8,\n                  value = 8,\n                  step = 1),\n      radioButtons(\"showPaths\",\n                   label = \"Show Pathing Squares?\",\n                   choices = list(\"Yes\" = TRUE, \"No\" = FALSE),\n                   selected = TRUE),\n      radioButtons(\"mode\", # make probability of count\n                   label = \"Number Mode\",\n                   choices = list(\"Count\" = FALSE, \"Probability\" = TRUE),\n                   selected = FALSE)\n    ),\n    mainPanel(\n      plotOutput(\"knightPlot\", click = \"plot_click\", width = \"100%\")\n    )\n  )\n)\n\n# Server logic to receive inputs\nserver <- function(input, output, session) {\n  pos <- reactiveVal(c(5, 5))\n  text <- reactiveVal(\"Click any square to move the knight\")\n  \n  # === Reactive value to track last activity time ===\n  lastActivity <- reactiveVal(Sys.time())\n  \n  # === Track whether auto animation is active ===\n  autoAnimate <- reactiveVal(FALSE)\n  \n  # === Timestamp for programmatic changes to input$exponent ===\n  lastProgrammatic <- reactiveVal(NULL)  # store Sys.time() for programmatic updates\n  progIgnoreWindow <- 0.6                # seconds: window to treat exponent changes as programmatic\n  \n  # === Observe non-exponent inputs for activity (these are always user interactions) ===\n  observeEvent(\n    list(input$plot_click, input$rows, input$cols, input$showPaths, input$mode),\n    {\n      lastActivity(Sys.time())   # Reset activity\n      autoAnimate(FALSE)         # Stop auto animation immediately\n    }\n  )\n  \n  # === Observe exponent changes but ignore ones that are very close to our programmatic updates ===\n  observeEvent(input$exponent, {\n    lp <- lastProgrammatic()\n    if (!is.null(lp) && difftime(Sys.time(), lp, units = \"secs\") < progIgnoreWindow) {\n      # This change was likely caused by our code -> ignore for \"user activity\"\n      return()\n    }\n    # Otherwise treat as real user activity\n    lastActivity(Sys.time())\n    autoAnimate(FALSE)\n  })\n  \n  # === Check inactivity every 500ms and start autoAnimate when >= 5s of inactivity ===\n  observe({\n    invalidateLater(500, session)\n    isolate({\n      if (difftime(Sys.time(), lastActivity(), units = \"secs\") >= 5 && !autoAnimate()) {\n        autoAnimate(TRUE)\n        \n        # Immediately perform first increment and mark it programmatic so it won't count as activity\n        lastProgrammatic(Sys.time())\n        current <- isolate(input$exponent)\n        if (current < 25) {\n          updateSliderInput(session, \"exponent\", value = current + 1)\n        } else {\n          updateSliderInput(session, \"exponent\", value = 1)\n        }\n      }\n    })\n  })\n  \n  # === Increment exponent every 1.5 seconds while animating ===\n  observe({\n    req(autoAnimate())\n    invalidateLater(1500, session)  # 1.5 second between increments\n    \n    isolate({\n      # Before programmatic update, set timestamp so the activity observer ignores it\n      lastProgrammatic(Sys.time())\n      current <- input$exponent\n      if (current < 25) {\n        updateSliderInput(session, \"exponent\", value = current + 1)\n      } else {\n        updateSliderInput(session, \"exponent\", value = 1)\n      }\n    })\n  })\n  \n  # === Update knight position on click ===\n  observeEvent(input$plot_click, {\n    click <- input$plot_click\n    x <- max(min(round(click$x), input$cols), 1)\n    y <- max(min(round(click$y), input$rows), 1)\n    \n    pos(c(y, x))\n    text(\"\")\n  })\n  \n  # === Keep position within bounds ===\n  observeEvent(input$rows, {\n    current_pos <- pos()\n    if (current_pos[1] > input$rows) pos(c(input$rows, current_pos[2]))\n  })\n  \n  observeEvent(input$cols, {\n    current_pos <- pos()\n    if (current_pos[2] > input$cols) pos(c(current_pos[1], input$cols))\n  })\n  \n  # === Render plot and text ===\n  output$textBox <- renderText({ text() })\n  \n  output$knightPlot <- renderPlot({\n    plotKnightFromMatrix(position = pos(), \n                         nrows = input$rows, \n                         ncols = input$cols, \n                         exponent = input$exponent, \n                         showPathsToExponent = as.logical(input$showPaths),\n                         probability = as.logical(input$mode))\n  }, height = 650, width = 650)\n}\n\n# Run the application\nshinyApp(ui = ui, server = server)","type":"text"},{"name":"knightImage.png","content":"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\nO9B2kH2w4UfLHzcdYhwqbUQa5zT2NWU1dTUnN3ceDj3c1uLVcugnx592tZq2Vh3RPbLyKPVo\n8dGBY4XH+o9Lj/eeyDzxsG162+2Tk09eORVzquN02OmzPwf9fPIM58yxs95nW895njv8C/uX\npvNu5xvbXdsP/er666EOt47GC+4Xmi96XGzpnNR59JLvpROXAy7/fIV35fzVyKud1xKu3bie\ner3rhvDG05u5N1/eKrj14faiO4Q7pXc175bfM7xX/Zvtb3u73LqO3A+43/4g7sHth4KHzx/J\nH33sLn5Me1z+xORJ7VPnp609QT0Xn0151v1c+vxDb8nvWr9vemHz4sc//P5o75vc1/1S9nLg\nz+Wv9F/t+svlr7b+6P57r/Nef3hT+lb/bc079rsz75PeP/kw6yPpY8Un208tn8M+3xnIGxiQ\n8mX8wV8BDCiPNhkA/LkLAFoyAAx4bqROUZ0PBwuiOtMOIvCfsOoMOVjcAGiA//QxvfDv5joA\n+3YAYAX16akARNMAiPcA6MSJI3X4LDd47lQWIjwbfC/8lJ6XDv5NUZ1Jv/J7dAuUqi5gdPsv\nWm2DJP7cegUAAACWZVhJZk1NACoAAAAIAAUBEgADAAAAAQABAAABGgAFAAAAAQAAAEoBGwAF\nAAAAAQAAAFIBKAADAAAAAQACAACHaQAEAAAAAQAAAFoAAAAAAAAAkAAAAAEAAACQAAAAAQAD\nkoYABwAAABIAAACEoAIABAAAAAEAAACeoAMABAAAAAEAAACcAAAAAEFTQ0lJAAAAU2NyZWVu\nc2hvdDpz4c0AAAAJcEhZcwAAFiUAABYlAUlSJPAAAALXaVRYdFhNTDpjb20uYWRvYmUueG1w\nAAAAAAA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAg\nQ29yZSA2LjAuMCI+CiAgIDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcv\nMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+CiAgICAgIDxyZGY6RGVzY3JpcHRpb24gcmRm\nOmFib3V0PSIiCiAgICAgICAgICAgIHhtbG5zOmV4aWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20v\nZXhpZi8xLjAvIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29t\nL3RpZmYvMS4wLyI+CiAgICAgICAgIDxleGlmOlBpeGVsWERpbWVuc2lvbj4xNTg8L2V4aWY6\nUGl4ZWxYRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpVc2VyQ29tbWVudD5TY3JlZW5zaG90\nPC9leGlmOlVzZXJDb21tZW50PgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+MTU2\nPC9leGlmOlBpeGVsWURpbWVuc2lvbj4KICAgICAgICAgPHRpZmY6UmVzb2x1dGlvblVuaXQ+\nMjwvdGlmZjpSZXNvbHV0aW9uVW5pdD4KICAgICAgICAgPHRpZmY6WVJlc29sdXRpb24+MTQ0\nPC90aWZmOllSZXNvbHV0aW9uPgogICAgICAgICA8dGlmZjpYUmVzb2x1dGlvbj4xNDQ8L3Rp\nZmY6WFJlc29sdXRpb24+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3Jp\nZW50YXRpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4\nbXBtZXRhPgpp3l5sAAAqlUlEQVR4Ae19CXRUx5V2tfZdYpNYtbAaMCCBMTuIVRY2O9hs9siY\nYJx/nGRin2Sc+EzwTCaZ8cwZZyZ/YseJbRw7/idmkhAbGxsYs3lhscy+gyQ2ARJCaGu1elH/\n31dPJVpSa+/lSXql03qvX9erV+/WV/feunXrlhBGMihgUMCgQJejQH7+14ld7qWNF24/BZzC\n5HQ6XT6bAvCdn0Cnc3eQ0/l1sNN5IRT4isjPzx7X4IH5zq8jGlw0LhgU8CAFCD5VXIA66SPG\nValz42hQwBsUKC4Ot6tya4GHC9XqonE0KOANChQUFBgY8wZhjTKbpgB1P5Wj9kRdMI4GBbxI\nAacq2wCeooRxNChgUMCggEEBgwIGBQwKGBQwKGBQwKCAQQGDAgYFDAoYFDAoYFDAoIBBAYMC\nBgUMChgU6KIUMHXB9zYtXDh/mrncvKna4RxmMpm+371Xr//ZsmWLowvSwm+v3KWAt2nTpoD9\n+/a87bDb11ZXO0VAYKAQTnjqmAKuxnWLmL516yd5fmuJLvZgUL7rJHhE/KC6uvr70dExIjUt\nVaSlpQkn/CWKbhfGWqsc30sdPfLy2fMXjnUdivjvTbsM8ObNmxdvs1V9GhcbK6ZNnyFWPPqY\n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\noIBBAT1T4P8Df8XT1C5sYxoAAAAASUVORK5CYII=","type":"binary"}]
