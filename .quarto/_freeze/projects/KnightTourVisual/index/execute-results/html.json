{
  "hash": "53102011be96e42f663b25c4b9c50d9c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Knight's Tour Adjacency Matrix Visual\"\nauthor: \"Miles Libbey V\"\nformat: html\nimage: knightTourIcon.png\ncategories:\n  - Self-Directed\n  - R\n---\n\n\n\n\n\n\n\n\n\nBelow you will find a Shiny App made for fun using concepts learned in *Linear Algebra* and *Computational Linear Algebra*, most notably graphs, adjacency matrices, matrix exponentiation. All of the concepts used to build the app are explained from an introductory level if you are interested in learning what is going on behind the scenes.\n\n## Shiny App\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n  sidebarLayout( # all of the input bars\n    sidebarPanel(\n      div(\n        style = \"font-size: 24px; font-weight: bold; margin-top: 0px;\",\n        textOutput(\"textBox\")\n      ),\n      sliderInput(\"exponent\", # id\n                  label = \"Choose # of Consecutive Jumps\",\n                  min = 1,\n                  max = 25,\n                  value = 1,\n                  step = 1),\n      sliderInput(\"rows\",\n                  label = \"# of Rows\",\n                  min = 2,\n                  max = 8,\n                  value = 8,\n                  step = 1),\n      sliderInput(\"cols\",\n                  label = \"# of Columns\",\n                  min = 2,\n                  max = 8,\n                  value = 8,\n                  step = 1),\n      radioButtons(\"showPaths\",\n                   label = \"Show Pathing Squares?\",\n                   choices = list(\"Yes\" = TRUE, \"No\" = FALSE),\n                   selected = TRUE),\n      radioButtons(\"mode\", # make probability of count\n                   label = \"Number Mode\",\n                   choices = list(\"Count\" = FALSE, \"Probability\" = TRUE),\n                   selected = FALSE)\n    ),\n    mainPanel(\n      plotOutput(\"knightPlot\", click = \"plot_click\", width = \"100%\")\n    )\n  )\n)\n\n# Server logic to receive inputs\nserver <- function(input, output, session) {\n  pos <- reactiveVal(c(5, 5))\n  text <- reactiveVal(\"Click any square to move the knight\")\n  \n  # === Reactive value to track last activity time ===\n  lastActivity <- reactiveVal(Sys.time())\n  \n  # === Track whether auto animation is active ===\n  autoAnimate <- reactiveVal(FALSE)\n  \n  # === Timestamp for programmatic changes to input$exponent ===\n  lastProgrammatic <- reactiveVal(NULL)  # store Sys.time() for programmatic updates\n  progIgnoreWindow <- 0.6                # seconds: window to treat exponent changes as programmatic\n  \n  # === Observe non-exponent inputs for activity (these are always user interactions) ===\n  observeEvent(\n    list(input$plot_click, input$rows, input$cols, input$showPaths, input$mode),\n    {\n      lastActivity(Sys.time())   # Reset activity\n      autoAnimate(FALSE)         # Stop auto animation immediately\n    }\n  )\n  \n  # === Observe exponent changes but ignore ones that are very close to our programmatic updates ===\n  observeEvent(input$exponent, {\n    lp <- lastProgrammatic()\n    if (!is.null(lp) && difftime(Sys.time(), lp, units = \"secs\") < progIgnoreWindow) {\n      # This change was likely caused by our code -> ignore for \"user activity\"\n      return()\n    }\n    # Otherwise treat as real user activity\n    lastActivity(Sys.time())\n    autoAnimate(FALSE)\n  })\n  \n  # === Check inactivity every 500ms and start autoAnimate when >= 5s of inactivity ===\n  observe({\n    invalidateLater(500, session)\n    isolate({\n      if (difftime(Sys.time(), lastActivity(), units = \"secs\") >= 5 && !autoAnimate()) {\n        autoAnimate(TRUE)\n        \n        # Immediately perform first increment and mark it programmatic so it won't count as activity\n        lastProgrammatic(Sys.time())\n        current <- isolate(input$exponent)\n        if (current < 25) {\n          updateSliderInput(session, \"exponent\", value = current + 1)\n        } else {\n          updateSliderInput(session, \"exponent\", value = 1)\n        }\n      }\n    })\n  })\n  \n  # === Increment exponent every 1.5 seconds while animating ===\n  observe({\n    req(autoAnimate())\n    invalidateLater(1500, session)  # 1.5 second between increments\n    \n    isolate({\n      # Before programmatic update, set timestamp so the activity observer ignores it\n      lastProgrammatic(Sys.time())\n      current <- input$exponent\n      if (current < 25) {\n        updateSliderInput(session, \"exponent\", value = current + 1)\n      } else {\n        updateSliderInput(session, \"exponent\", value = 1)\n      }\n    })\n  })\n  \n  # === Update knight position on click ===\n  observeEvent(input$plot_click, {\n    click <- input$plot_click\n    x <- max(min(round(click$x), input$cols), 1)\n    y <- max(min(round(click$y), input$rows), 1)\n    \n    pos(c(y, x))\n    text(\"\")\n  })\n  \n  # === Keep position within bounds ===\n  observeEvent(input$rows, {\n    current_pos <- pos()\n    if (current_pos[1] > input$rows) pos(c(input$rows, current_pos[2]))\n  })\n  \n  observeEvent(input$cols, {\n    current_pos <- pos()\n    if (current_pos[2] > input$cols) pos(c(current_pos[1], input$cols))\n  })\n  \n  # === Render plot and text ===\n  output$textBox <- renderText({ text() })\n  \n  output$knightPlot <- renderPlot({\n    plotKnightFromMatrix(position = pos(), \n                         nrows = input$rows, \n                         ncols = input$cols, \n                         exponent = input$exponent, \n                         showPathsToExponent = as.logical(input$showPaths),\n                         probability = as.logical(input$mode))\n  }, height = 650, width = 650)\n}\n\n# Run the application\nshinyApp(ui = ui, server = server)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n\n\n\n## The Math Behind the App\n\n### Adjacency Matrices\n\nAn adjacency matrix is a type of matrix used to represent a mathematical graph, as pictured below:\n\n![](images/graphExample-01.png){.lightbox fig-align=\"center\" width=\"226\"}\n\nThe matrix shows which vertices are adjacent to one another and which are not. It can be thought of as this: rows are the starting points and the columns are the ending points. If you can get from a starting point to an ending point, then a 1 is placed, and a 0 is placed if not.\n\n$$\nA =\n\\begin{bmatrix}\n0 & 1 & 0 & 1 \\\\\n1 & 0 & 0 & 1 \\\\\n0 & 0 & 0 & 1 \\\\\n1 & 1 & 1 & 0 \\\\\n\\end{bmatrix}\n$$\n\nFor example, in our graph, 2 and 4 are connected, so if you look in the 2nd row (the starting place) and then look at the 4th row (the ending place), you will see that there is a 1. Vice versa, if you look at $A_{2,3}$ you will see that it is a 0, meaning 2 and 3 are unconnected, which can be confirmed from looking at the graph. These types of matrices are always square $n \\times n$ matrices because it just the same vertices being shown in the both and rows and columns. How this relates to a knight is if you imagine the 64 squares on a chess board as vertices, we can graph the connecting vertices to show what the knight can make in one move (later on we will be able to show multiple moves, but we are not there yet).\n\nHowever, chess squares have defined places where they are. In this graph, 1 can be put to the right of 4 and it wouldn't matter, as seen below.\n\n![There is not difference between this graph and the one before, it will have the same adjacency matrix](images/graphExample2-01.png){.lightbox fig-align=\"center\" width=\"324\"}\n\n### Lattice Adjacency Matrices\n\nWe need to introduce a system of order to the graph to make it more of a rigid grid. This is precisely why using a [Lattice graph](https://en.wikipedia.org/wiki/Lattice_graph) is so helpful in this case. Lattice graphs offer distinct coordinates, or lattices, which line up exactly with what we want to do with the chess squares because each squares is distinct and has 2-dimensional coordinates (i.e. the point (1,2) has an x dimension and a y dimension).\n\n$$\n\\begin{gather*}\n\\begin{bmatrix} \n(1,1) & (1,2) & (1,3) \\\\\n(2,1) & (2,2) & (2,3) \\\\\n(3,1) & (3,2) & (3,3) \\\\\n\\end{bmatrix} \\\\\n\\text{Lattice Matrix}\n\\end{gather*}\n$$\n\nJust as we made a adjacency matrix out of a normal graph, we can make a lattice adjacency matrix out of a lattice graph. For our purposes, lattice matrices are just regular matrices, but each entry in the matrix is representative of a lattice point (i.e. $A_{1,1} \\text{ is representative of the lattice point } (1,1)$).\n\nIn order to make a lattice adjacency matrix given $n \\times n$ lattices, we will essentially construct a $n^2 \\times n^2$ matrix. This comes from exactly what we did with the adjacency matrices; every single node was put across horizontally and vertically in order to have every pairs of connections between the nodes. Just in this case, since our grid has $n \\times n = n^2$ lattices, it will be much larger. Essentially what we're doing is making a long vector out of the lattice and then making that long vector 2D by taking the outer-product of 2 of long vectors.\n\n$$\n\\begin{gather*}\n  \\begin{bmatrix}\n  1 & 2 & 3 \\\\\n  4 & 5 & 6 \\\\\n  7 & 8 & 9 \\\\\n  \\end{bmatrix}\n  \\longrightarrow \n  \\begin{bmatrix}\n  1 \\\\ 2 \\\\ 3 \\\\ 4 \\\\ 5 \\\\ 6 \\\\ 7 \\\\ 8 \\\\ 9 \\\\ \\end{bmatrix} \n  \\longrightarrow\n  \\begin{bmatrix}\n  &1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 \\\\\n  1 \\\\ 2 \\\\ 3 \\\\ 4 \\\\ 5 \\\\ 6 \\\\ 7 \\\\ 8 \\\\ 9 \\\\\n  \\end{bmatrix} \\\\\n  \\space\\space\\text{Lattice}\\space\\space\\space\\space\\space\\space\\space\\text{Long Vector}\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\text{2D Long Vector}\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\\space\n\\end{gather*}\n$$\n\n### Making the Lattice Adjacency Matrix\n\nNow that the matrix is made, we can use the 2D to 1D conversion formula: $(\\text{row} -1) \\times \\text{row length} + \\text{column}$. This helps streamline the process of actually assigning what squares are adjacent to one another when a knight jumps. For every single cell, we can just calculate the knight moves with a helper function and then assign them a 1 or 0 if they are adjacent.\n\nThe end result looks like this:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/Image-1.png){width=672}\n:::\n:::\n\n\nNow, the reason why we wanted to go through all this trouble was because adjacency matrices are very useful for showing future movement from any starting point. This is done as easily as just exponentiating the adjacency matrix $A$ to some degree $n$. In doing so, from the basic properties of matrix multiplication, which we can see clearly using the matrix $A$ from before and making $A^2$ and zooming in on the results of node 2:\n\n$$\n\\begin{equation*}\n\\begin{gathered}\n  A =\n  \\begin{bmatrix}\n  0 & 1 & 0 & 1 \\\\\n  1 & 0 & 0 & 1 \\\\\n  0 & 0 & 0 & 1 \\\\\n  1 & 1 & 1 & 0 \\\\\n  \\end{bmatrix}\n  \\\\[1em]\n  A \\times A =\n  \\begin{bmatrix}\n  \\cdot & \\color{red}{(0 \\cdot 1) + (1 \\cdot 0) + (0 \\cdot 0) + (1 \\cdot 1)} & \\cdot & \\cdot \\\\\n  \\cdot & \\color{red}{(1 \\cdot 1) + (0 \\cdot 0) + (0 \\cdot 0) + (1 \\cdot 1)} & \\cdot & \\cdot \\\\\n  \\cdot & \\color{red}{(0 \\cdot 1) + (0 \\cdot 0) + (0 \\cdot 0) + (1 \\cdot 1)} & \\cdot & \\cdot \\\\\n  \\cdot & \\color{red}{(1 \\cdot 1) + (1 \\cdot 0) + (1 \\cdot 0) + (0 \\cdot 1)} & \\cdot & \\cdot \\\\\n  \\end{bmatrix}\n  =\n  \\begin{bmatrix}\n  \\cdot & \\color{red}{1} & \\cdot & \\cdot \\\\\n  \\cdot & \\color{red}{2} & \\cdot & \\cdot \\\\\n  \\cdot & \\color{red}{1} & \\cdot & \\cdot \\\\\n  \\cdot & \\color{red}{1} & \\cdot & \\cdot \\\\\n  \\end{bmatrix}\n  \\\\[1em]\n  \\begin{array}{c c l}\n    \\textbf{Start} & \\textbf{Count} & \\textbf{Explanation} \\\\\n    1 & 1 & \\text{1 path from node 1 of } \\textcolor{green}{\\text{length }\\textbf{2}} \\text{ to node 2: } (1 → 4 → 2) \\\\\n    2 & 2 & \\text{2 paths from node 2 of } \\textcolor{green}{\\text{length }\\textbf{2}} \\text{ to node 2: } (2 → 1 → 2), (2 → 4 → 2) \\\\\n    3 & 1 & \\text{1 path from node 3 of } \\textcolor{green}{\\text{length }\\textbf{2}} \\text{ to node 2: } (3 → 4 → 2) \\\\\n    4 & 1 & \\text{1 path from node 4 of } \\textcolor{green}{\\text{length }\\textbf{2}} \\text{ to node 2: } (4 → 1 → 2) \\\\\n    \\end{array}\n\\end{gathered}\n\\end{equation*}\n$$",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}