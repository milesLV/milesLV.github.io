{"title":"Madrid Metro MySQL Database","markdown":{"yaml":{"title":"Madrid Metro MySQL Database","author":"Miles Libbey V","image":"icon.png","categories":["University","MySQL"]},"headingText":"Project Overview","containsRefs":false,"markdown":"\n\n\nDesigned and implemented a MySQL database for Madrid's metro system with detailed schema and features based on a list of assumptions, including reactive triggers and events for calculating pricing, managing metro card validity, and handling client transactions dynamically based on age, city zone, and discount eligibility.\n\n------------------------------------------------------------------------\n\n## System Architecture\n\n**Relational Schema & EER Diagram**\n\n-   **Clients**: stores personal info, address, and the type of discount they receive\n-   **Cards**: monthly cards and rechargeable cards tied to each client\n-   **Cities**: city zones and their respective pricing rules\n-   **Statuses**: discount categories (student, senior, etc.)\n-   **Charge History**: logs transactions and recharges\n\n### Relational Schema\n\n![](images/madridMetroSchema.png){.lightbox fig-align=\"center\"}\n\n### EER Diagram\n\n![](icon.png){.lightbox fig-align=\"center\"}\n\n------------------------------------------------------------------------\n\n## Key Features\n\n### Database Modeling\n\n-   Normalized schema with primary/foreign keys and cascading deletes.\n-   Metadata defined for all entities, ensuring referential integrity.\n\n### Automation with Triggers & Events\n\n-   Automatic card issuance when registering a new client\n\n-   Recharge triggers that update validity and transaction logs\n\n-   Daily event to expire cards after 30 days without renewal\n\n-   Dynamic pricing trigger calculates ticket cost based on:\n\n    [✦]{style=\"font-size:0.65em;\"} Age (student/senior discounts)\n\n    [✦]{style=\"font-size:0.65em;\"} City zone\n\n    [✦]{style=\"font-size:0.65em;\"} Special discount status\n\n### Lifecycle Management\n\n-   Full support for registration → recharge → replacement → cancellation / expiration\n-   `ON DELETE CASCADE` ensures dependent records are cleaned automatically\n-   Automatic re-pricing when client address or eligibility changes\n\n------------------------------------------------------------------------\n\n## Code Snippet Examples\n\n### 1. Automatic Card Creation\n\n``` sql\nDELIMITER //\nCREATE TRIGGER makeClientMonthlyCard\nAFTER INSERT ON clients\nFOR EACH ROW\nBEGIN\n    DECLARE last_number INT;\n    DECLARE newCardID INT;\n\n    SELECT COALESCE(MAX(CardID), 0) INTO last_number FROM monthlyCard;\n    SET newCardID = last_number + 1;\n\n    INSERT INTO monthlyCard (ClientID, CardID, CardType, DateCharged, IsValid)\n    VALUES (NEW.ClientID, newCardID, \"M\", CURDATE(), 1);\nEND;//\nDELIMITER ;\n```\n\n*Automatically issues a monthly card when a new client registers*\n\n### 2. Automatic Recharge Handling\n\n``` sql\nDELIMITER //\nCREATE TRIGGER check_date_charged\nAFTER INSERT ON chargeHistory\nFOR EACH ROW\nBEGIN\n    UPDATE monthlyCard\n    SET DateCharged = CURDATE(), IsValid = 1\n    WHERE ClientID = NEW.ClientID;\nEND;//\nDELIMITER ;\n```\n\n*Ensures monthly card validity updates instantly after a recharge*\n\n### 3. Daily Event to Expire Cards\n\n``` sql\nDELIMITER //\nCREATE EVENT updateValidity\nON SCHEDULE EVERY 1 DAY\nSTARTS TIMESTAMP(CURRENT_DATE + INTERVAL 1 DAY) + INTERVAL '02:30:00' HOUR_SECOND\nDO\nBEGIN\n    UPDATE monthlyCard\n    SET IsValid = 0\n    WHERE DateCharged <= DATE_SUB(CURDATE(), INTERVAL 30 DAY);\nEND;//\nDELIMITER ;\n```\n\n*Keeps card status accurate by expiring inactive cards daily*\n\n### 4. Dynamic Pricing Based on Age, Zone, and Circumstance\n\n``` sql\nDELIMITER //\nCREATE TRIGGER calculatePrice\nBEFORE INSERT ON clients\nFOR EACH ROW\nBEGIN\n    DECLARE client_age INT;\n    DECLARE client_discount DECIMAL(10,2);\n    DECLARE final_price DECIMAL(10,2);\n    DECLARE zone_price DECIMAL(10,2);\n    DECLARE ifStudent BOOLEAN;\n    DECLARE ifZoneA BOOLEAN;\n\n    SET client_age = TIMESTAMPDIFF(YEAR, NEW.BDay, CURDATE());\n\n    -- Apply senior discount when turning 65\n    IF client_age >= 65 THEN\n        SET NEW.discountType = CONCAT(SUBSTRING(NEW.discountType, 1, CHAR_LENGTH(NEW.discountType) - 1), 'M');\n    END IF;\n\n    SELECT statuses.discountAmount INTO client_discount\n      FROM statuses WHERE statuses.typeID = NEW.discountType;\n\n    IF NEW.discountType LIKE 'E%' THEN \n      SET ifStudent = 1; \n      ELSE SET ifStudent = 0; \n    END IF;\n    \n    SELECT ZonePrice INTO zone_price FROM cities WHERE CityName = NEW.City;\n    \n    SELECT EXISTS(\n        SELECT 1 FROM clients\n        WHERE PostalCode LIKE '280%' AND ClientID = NEW.ClientID\n    ) INTO ifZoneA;\n\n    IF ifStudent = 1 AND client_age >= 65 THEN\n        SET final_price = 6.30 * client_discount;\n    ELSEIF client_age < 26 OR ifStudent = 1 THEN\n        SET final_price = 20.00 * client_discount;\n    ELSEIF client_age >= 65 THEN\n        SET final_price = 6.30 * client_discount;\n    ELSEIF ifZoneA = 1 THEN\n        SET final_price = 54.60 * client_discount;\n    ELSE\n        SET final_price = zone_price * client_discount;\n    END IF;\n\n    INSERT INTO chargeHistory (ClientID, ChargeAmount, Type) \n    VALUES (NEW.ClientID, final_price, \"Purchase\");\nEND;//\nDELIMITER ;\n```\n\n*Determines ticket cost dynamically based on multiple client attributes*\n\n------------------------------------------------------------------------\n\n## Example Queries\n\n``` sql\n-- Show all clients in Leganés with zone category and purchase price\nSELECT clients.*, cities.ZoneID, chargeHistory.ChargeAmount\n  FROM clients\n  INNER JOIN cities ON clients.City = cities.CityName\n  INNER JOIN chargeHistory ON clients.ClientID = chargeHistory.ClientID\n  WHERE clients.City = 'Leganes';\n```\n\n``` sql\n-- Check validity of a specific client’s card\nSELECT ClientID, isValid \n  FROM monthlyCard\n  WHERE ClientID = \"002\";\n```\n\n------------------------------------------------------------------------\n\n## Technical Highlights\n\n-   SQL: DDL, DML, joins, triggers, events, cascading constraints\n-   Relational schema design with 1:1 and 1:M relationships\n-   Business rules automation embedded directly in the database\n-   Data integrity & lifecycle tracking across multiple entities\n\n------------------------------------------------------------------------\n\n## Skills\n\nThis project demonstrates my ability to: - Design real-world relational databases - Implement automated logic based on given assumptions inside SQL - Manage complex client workflows in a high-traffic system\n\n> **Skills Demonstrated**: MySQL · Relational Database Design · SQL Triggers & Events · Data Lifecycle Management\n","srcMarkdownNoYaml":"\n\n## Project Overview\n\nDesigned and implemented a MySQL database for Madrid's metro system with detailed schema and features based on a list of assumptions, including reactive triggers and events for calculating pricing, managing metro card validity, and handling client transactions dynamically based on age, city zone, and discount eligibility.\n\n------------------------------------------------------------------------\n\n## System Architecture\n\n**Relational Schema & EER Diagram**\n\n-   **Clients**: stores personal info, address, and the type of discount they receive\n-   **Cards**: monthly cards and rechargeable cards tied to each client\n-   **Cities**: city zones and their respective pricing rules\n-   **Statuses**: discount categories (student, senior, etc.)\n-   **Charge History**: logs transactions and recharges\n\n### Relational Schema\n\n![](images/madridMetroSchema.png){.lightbox fig-align=\"center\"}\n\n### EER Diagram\n\n![](icon.png){.lightbox fig-align=\"center\"}\n\n------------------------------------------------------------------------\n\n## Key Features\n\n### Database Modeling\n\n-   Normalized schema with primary/foreign keys and cascading deletes.\n-   Metadata defined for all entities, ensuring referential integrity.\n\n### Automation with Triggers & Events\n\n-   Automatic card issuance when registering a new client\n\n-   Recharge triggers that update validity and transaction logs\n\n-   Daily event to expire cards after 30 days without renewal\n\n-   Dynamic pricing trigger calculates ticket cost based on:\n\n    [✦]{style=\"font-size:0.65em;\"} Age (student/senior discounts)\n\n    [✦]{style=\"font-size:0.65em;\"} City zone\n\n    [✦]{style=\"font-size:0.65em;\"} Special discount status\n\n### Lifecycle Management\n\n-   Full support for registration → recharge → replacement → cancellation / expiration\n-   `ON DELETE CASCADE` ensures dependent records are cleaned automatically\n-   Automatic re-pricing when client address or eligibility changes\n\n------------------------------------------------------------------------\n\n## Code Snippet Examples\n\n### 1. Automatic Card Creation\n\n``` sql\nDELIMITER //\nCREATE TRIGGER makeClientMonthlyCard\nAFTER INSERT ON clients\nFOR EACH ROW\nBEGIN\n    DECLARE last_number INT;\n    DECLARE newCardID INT;\n\n    SELECT COALESCE(MAX(CardID), 0) INTO last_number FROM monthlyCard;\n    SET newCardID = last_number + 1;\n\n    INSERT INTO monthlyCard (ClientID, CardID, CardType, DateCharged, IsValid)\n    VALUES (NEW.ClientID, newCardID, \"M\", CURDATE(), 1);\nEND;//\nDELIMITER ;\n```\n\n*Automatically issues a monthly card when a new client registers*\n\n### 2. Automatic Recharge Handling\n\n``` sql\nDELIMITER //\nCREATE TRIGGER check_date_charged\nAFTER INSERT ON chargeHistory\nFOR EACH ROW\nBEGIN\n    UPDATE monthlyCard\n    SET DateCharged = CURDATE(), IsValid = 1\n    WHERE ClientID = NEW.ClientID;\nEND;//\nDELIMITER ;\n```\n\n*Ensures monthly card validity updates instantly after a recharge*\n\n### 3. Daily Event to Expire Cards\n\n``` sql\nDELIMITER //\nCREATE EVENT updateValidity\nON SCHEDULE EVERY 1 DAY\nSTARTS TIMESTAMP(CURRENT_DATE + INTERVAL 1 DAY) + INTERVAL '02:30:00' HOUR_SECOND\nDO\nBEGIN\n    UPDATE monthlyCard\n    SET IsValid = 0\n    WHERE DateCharged <= DATE_SUB(CURDATE(), INTERVAL 30 DAY);\nEND;//\nDELIMITER ;\n```\n\n*Keeps card status accurate by expiring inactive cards daily*\n\n### 4. Dynamic Pricing Based on Age, Zone, and Circumstance\n\n``` sql\nDELIMITER //\nCREATE TRIGGER calculatePrice\nBEFORE INSERT ON clients\nFOR EACH ROW\nBEGIN\n    DECLARE client_age INT;\n    DECLARE client_discount DECIMAL(10,2);\n    DECLARE final_price DECIMAL(10,2);\n    DECLARE zone_price DECIMAL(10,2);\n    DECLARE ifStudent BOOLEAN;\n    DECLARE ifZoneA BOOLEAN;\n\n    SET client_age = TIMESTAMPDIFF(YEAR, NEW.BDay, CURDATE());\n\n    -- Apply senior discount when turning 65\n    IF client_age >= 65 THEN\n        SET NEW.discountType = CONCAT(SUBSTRING(NEW.discountType, 1, CHAR_LENGTH(NEW.discountType) - 1), 'M');\n    END IF;\n\n    SELECT statuses.discountAmount INTO client_discount\n      FROM statuses WHERE statuses.typeID = NEW.discountType;\n\n    IF NEW.discountType LIKE 'E%' THEN \n      SET ifStudent = 1; \n      ELSE SET ifStudent = 0; \n    END IF;\n    \n    SELECT ZonePrice INTO zone_price FROM cities WHERE CityName = NEW.City;\n    \n    SELECT EXISTS(\n        SELECT 1 FROM clients\n        WHERE PostalCode LIKE '280%' AND ClientID = NEW.ClientID\n    ) INTO ifZoneA;\n\n    IF ifStudent = 1 AND client_age >= 65 THEN\n        SET final_price = 6.30 * client_discount;\n    ELSEIF client_age < 26 OR ifStudent = 1 THEN\n        SET final_price = 20.00 * client_discount;\n    ELSEIF client_age >= 65 THEN\n        SET final_price = 6.30 * client_discount;\n    ELSEIF ifZoneA = 1 THEN\n        SET final_price = 54.60 * client_discount;\n    ELSE\n        SET final_price = zone_price * client_discount;\n    END IF;\n\n    INSERT INTO chargeHistory (ClientID, ChargeAmount, Type) \n    VALUES (NEW.ClientID, final_price, \"Purchase\");\nEND;//\nDELIMITER ;\n```\n\n*Determines ticket cost dynamically based on multiple client attributes*\n\n------------------------------------------------------------------------\n\n## Example Queries\n\n``` sql\n-- Show all clients in Leganés with zone category and purchase price\nSELECT clients.*, cities.ZoneID, chargeHistory.ChargeAmount\n  FROM clients\n  INNER JOIN cities ON clients.City = cities.CityName\n  INNER JOIN chargeHistory ON clients.ClientID = chargeHistory.ClientID\n  WHERE clients.City = 'Leganes';\n```\n\n``` sql\n-- Check validity of a specific client’s card\nSELECT ClientID, isValid \n  FROM monthlyCard\n  WHERE ClientID = \"002\";\n```\n\n------------------------------------------------------------------------\n\n## Technical Highlights\n\n-   SQL: DDL, DML, joins, triggers, events, cascading constraints\n-   Relational schema design with 1:1 and 1:M relationships\n-   Business rules automation embedded directly in the database\n-   Data integrity & lifecycle tracking across multiple entities\n\n------------------------------------------------------------------------\n\n## Skills\n\nThis project demonstrates my ability to: - Design real-world relational databases - Implement automated logic based on given assumptions inside SQL - Manage complex client workflows in a high-traffic system\n\n> **Skills Demonstrated**: MySQL · Relational Database Design · SQL Triggers & Events · Data Lifecycle Management\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","resources":["../../Miles_LibbeyV_Resume_2025.pdf"],"editor":"source","theme":"lumen","page-layout":"article","grid":{"body-width":"1000px","margin-width":"300px","sidebar-width":"550px","gutter-width":"1.5em"},"page-footer":{"left":"&copy; Miles Libbey V, 2025<br>\nAll content licensed under <i class='bi-badge-cc'></i>\n[(CC BY-NC-SA 4.0)](http://creativecommons.org/licenses/by-nc-sa/4.0/)\n","right":"Site built with <a href='https://quarto.org/'>Quarto</a>\n"},"title":"Madrid Metro MySQL Database","author":"Miles Libbey V","image":"icon.png","categories":["University","MySQL"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}