{"title":"About Me","markdown":{"yaml":{"title":"About Me","project":{"type":"website","output-dir":"docs"},"format":{"html":{"css":"styles.css","toc":false}}},"headingText":"Education","containsRefs":false,"markdown":"\n\n:::: {#intro-heading}\n::: {style=\"float: left; margin-right: 15px;\"}\n![](profilePicture.png){width=\"320\"}\n:::\n\nHello! My name is Miles Libbey (he/him). I am a recent Macalester College graduate with pursuits in Data Science, Psychology, Linguistics, and Political Science. I am passionate about focus on managing databases and transforming raw data into actionable insights. I enjoy working at the intersection of data engineering and analysis, ensuring that information is well-structured, reliable, and ready to reveal meaningful patterns. My most recent project was outside-of-class Linguistics research focusing on the dissimilarity of vocalic phonation distinctions across sex and gender with the department chair and a multi-disciplinary team of many students. This research is currently being prepared for publication, and it exemplifies my enthusiasm for applying data analysis in new and exciting contexts.\n\nI believe, like the authors of *Freakonomics*, that the world is full of data and questions to be explored, and with the right tools and methods, nearly anything can be delved into. This curiosity is what led me to Data Science in the first place—its promise of helping to uncover hidden stories within data, whether through cleaning, analysis, or visualization.\n\n\nI have a long history of working with non-profits, beginning in high school where I completed my goal of getting 168 hours (a week's worth of time) in volunteer work to being a Development Intern at The Arc Minnesota just recently. Ultimately my goal is to hone my data skills so I can go back into the non-profit world and help to create real progress in any way I can.\n\nYou can find my resume [here](cv.qmd)\n\n\n::::\n\n<iframe\n  src=\"https://mileslv.github.io/Career-Timeline/\" width = 100% height=\"450\">\n</iframe>\n\n\n\n::: {##intro-heading}\n\nB.A. in Data Science \\| Macalester College 2021 - 2025 \\| St. Paul, MN\n\n:::\n\n\n\n# Featured Projects\n::: {.grid}\n::: {.g-col-6}\n<a href=\"projects/capstonePortfolio/index.html\" class=\"overlay-container\">\n  <img src=\"projects/capstonePortfolio/icon20.png\">\n  <div class=\"overlay-text\">Most Recent Project</div>\n</a>\n:::\n\n::: {.g-col-6}\n<a href=\"projects/LonelinessProject/index.html\" class=\"overlay-container\">\n  <img src=\"projects/LonelinessProject/icon.png\">\n  <div class=\"overlay-text\">Personal Project</div>\n</a>\n:::\n:::\n\n<div class=\"button-wrapper\">\n  <a href=\"projects.html\" class=\"button-link\">\n    Explore All of My Projects\n  </a>\n</div>\n\n\n\n<script>\n(function() {\n  function hasContent(el) {\n    if (!el) return false;\n    // consider an overlay \"contentful\" if it has an <img> or .overlay-text\n    return !!(el.querySelector && (el.querySelector('img') || el.querySelector('.overlay-text')));\n  }\n\n  // Map of href -> first \"contentful\" element (or first encountered if none contentful)\n  const keepMap = new Map();\n  const removed = [];\n\n  // First pass: register contentful overlays by href\n  document.querySelectorAll('.overlay-container').forEach(el => {\n    const href = (el.getAttribute && el.getAttribute('href')) || (el.querySelector && el.querySelector('a')?.getAttribute('href')) || '';\n    const key = href.toLowerCase();\n    const contentful = hasContent(el);\n\n    if (!keepMap.has(key)) {\n      // keep the first contentful if possible, otherwise keep this for now\n      keepMap.set(key, { el, contentful });\n    } else {\n      const existing = keepMap.get(key);\n      // if existing is not contentful but this one is, upgrade the keeper\n      if (!existing.contentful && contentful) {\n        // remove previously stored element (we'll remove DOM later)\n        if (existing.el && existing.el.remove) {\n          existing.el.remove();\n          removed.push(existing.el);\n        }\n        keepMap.set(key, { el, contentful });\n      } else {\n        // otherwise this is a duplicate; remove it if it's empty, or if both contentful, remove this later\n        if (!contentful) {\n          if (el.remove) { el.remove(); removed.push(el); }\n        } else {\n          // both contentful — keep the first, remove this one\n          if (el.remove) { el.remove(); removed.push(el); }\n        }\n      }\n    }\n  });\n\n  // If you want to be extra defensive against late DOM injection by Quarto/theme scripts,\n  // run a short MutationObserver to catch newly-added duplicates for a few seconds:\n  const observer = new MutationObserver(muts => {\n    muts.forEach(m => {\n      m.addedNodes.forEach(node => {\n        if (node.nodeType !== 1) return;\n        if (node.matches && node.matches('.overlay-container')) {\n          const href = (node.getAttribute && node.getAttribute('href')) || (node.querySelector && node.querySelector('a')?.getAttribute('href')) || '';\n          const key = href.toLowerCase();\n          const contentful = hasContent(node);\n          const existing = keepMap.get(key);\n          if (!existing) {\n            keepMap.set(key, { el: node, contentful });\n          } else {\n            if (!existing.contentful && contentful) {\n              if (existing.el && existing.el.remove) existing.el.remove();\n              keepMap.set(key, { el: node, contentful });\n            } else {\n              // remove the new duplicate\n              if (node.remove) { node.remove(); removed.push(node); }\n            }\n          }\n        } else if (node.querySelectorAll) {\n          node.querySelectorAll('.overlay-container').forEach(child => {\n            // same logic for nested added nodes\n            const href = (child.getAttribute && child.getAttribute('href')) || (child.querySelector && child.querySelector('a')?.getAttribute('href')) || '';\n            const key = href.toLowerCase();\n            const contentful = hasContent(child);\n            const existing = keepMap.get(key);\n            if (!existing) {\n              keepMap.set(key, { el: child, contentful });\n            } else {\n              if (!existing.contentful && contentful) {\n                if (existing.el && existing.el.remove) existing.el.remove();\n                keepMap.set(key, { el: child, contentful });\n              } else {\n                if (child.remove) { child.remove(); removed.push(child); }\n              }\n            }\n          });\n        }\n      });\n    });\n  });\n\n  observer.observe(document.body, { childList: true, subtree: true });\n  // stop observing after 5s (adjust if your theme injects later)\n  setTimeout(() => observer.disconnect(), 5000);\n\n  console.info('overlay dedupe: removed', removed.length, 'duplicate overlay(s). Kept', keepMap.size, 'unique overlay(s).');\n})();\n</script>","srcMarkdownNoYaml":"\n\n:::: {#intro-heading}\n::: {style=\"float: left; margin-right: 15px;\"}\n![](profilePicture.png){width=\"320\"}\n:::\n\nHello! My name is Miles Libbey (he/him). I am a recent Macalester College graduate with pursuits in Data Science, Psychology, Linguistics, and Political Science. I am passionate about focus on managing databases and transforming raw data into actionable insights. I enjoy working at the intersection of data engineering and analysis, ensuring that information is well-structured, reliable, and ready to reveal meaningful patterns. My most recent project was outside-of-class Linguistics research focusing on the dissimilarity of vocalic phonation distinctions across sex and gender with the department chair and a multi-disciplinary team of many students. This research is currently being prepared for publication, and it exemplifies my enthusiasm for applying data analysis in new and exciting contexts.\n\nI believe, like the authors of *Freakonomics*, that the world is full of data and questions to be explored, and with the right tools and methods, nearly anything can be delved into. This curiosity is what led me to Data Science in the first place—its promise of helping to uncover hidden stories within data, whether through cleaning, analysis, or visualization.\n\n\nI have a long history of working with non-profits, beginning in high school where I completed my goal of getting 168 hours (a week's worth of time) in volunteer work to being a Development Intern at The Arc Minnesota just recently. Ultimately my goal is to hone my data skills so I can go back into the non-profit world and help to create real progress in any way I can.\n\nYou can find my resume [here](cv.qmd)\n\n\n::::\n\n<iframe\n  src=\"https://mileslv.github.io/Career-Timeline/\" width = 100% height=\"450\">\n</iframe>\n\n\n## Education\n\n::: {##intro-heading}\n\nB.A. in Data Science \\| Macalester College 2021 - 2025 \\| St. Paul, MN\n\n:::\n\n\n\n# Featured Projects\n::: {.grid}\n::: {.g-col-6}\n<a href=\"projects/capstonePortfolio/index.html\" class=\"overlay-container\">\n  <img src=\"projects/capstonePortfolio/icon20.png\">\n  <div class=\"overlay-text\">Most Recent Project</div>\n</a>\n:::\n\n::: {.g-col-6}\n<a href=\"projects/LonelinessProject/index.html\" class=\"overlay-container\">\n  <img src=\"projects/LonelinessProject/icon.png\">\n  <div class=\"overlay-text\">Personal Project</div>\n</a>\n:::\n:::\n\n<div class=\"button-wrapper\">\n  <a href=\"projects.html\" class=\"button-link\">\n    Explore All of My Projects\n  </a>\n</div>\n\n\n\n<script>\n(function() {\n  function hasContent(el) {\n    if (!el) return false;\n    // consider an overlay \"contentful\" if it has an <img> or .overlay-text\n    return !!(el.querySelector && (el.querySelector('img') || el.querySelector('.overlay-text')));\n  }\n\n  // Map of href -> first \"contentful\" element (or first encountered if none contentful)\n  const keepMap = new Map();\n  const removed = [];\n\n  // First pass: register contentful overlays by href\n  document.querySelectorAll('.overlay-container').forEach(el => {\n    const href = (el.getAttribute && el.getAttribute('href')) || (el.querySelector && el.querySelector('a')?.getAttribute('href')) || '';\n    const key = href.toLowerCase();\n    const contentful = hasContent(el);\n\n    if (!keepMap.has(key)) {\n      // keep the first contentful if possible, otherwise keep this for now\n      keepMap.set(key, { el, contentful });\n    } else {\n      const existing = keepMap.get(key);\n      // if existing is not contentful but this one is, upgrade the keeper\n      if (!existing.contentful && contentful) {\n        // remove previously stored element (we'll remove DOM later)\n        if (existing.el && existing.el.remove) {\n          existing.el.remove();\n          removed.push(existing.el);\n        }\n        keepMap.set(key, { el, contentful });\n      } else {\n        // otherwise this is a duplicate; remove it if it's empty, or if both contentful, remove this later\n        if (!contentful) {\n          if (el.remove) { el.remove(); removed.push(el); }\n        } else {\n          // both contentful — keep the first, remove this one\n          if (el.remove) { el.remove(); removed.push(el); }\n        }\n      }\n    }\n  });\n\n  // If you want to be extra defensive against late DOM injection by Quarto/theme scripts,\n  // run a short MutationObserver to catch newly-added duplicates for a few seconds:\n  const observer = new MutationObserver(muts => {\n    muts.forEach(m => {\n      m.addedNodes.forEach(node => {\n        if (node.nodeType !== 1) return;\n        if (node.matches && node.matches('.overlay-container')) {\n          const href = (node.getAttribute && node.getAttribute('href')) || (node.querySelector && node.querySelector('a')?.getAttribute('href')) || '';\n          const key = href.toLowerCase();\n          const contentful = hasContent(node);\n          const existing = keepMap.get(key);\n          if (!existing) {\n            keepMap.set(key, { el: node, contentful });\n          } else {\n            if (!existing.contentful && contentful) {\n              if (existing.el && existing.el.remove) existing.el.remove();\n              keepMap.set(key, { el: node, contentful });\n            } else {\n              // remove the new duplicate\n              if (node.remove) { node.remove(); removed.push(node); }\n            }\n          }\n        } else if (node.querySelectorAll) {\n          node.querySelectorAll('.overlay-container').forEach(child => {\n            // same logic for nested added nodes\n            const href = (child.getAttribute && child.getAttribute('href')) || (child.querySelector && child.querySelector('a')?.getAttribute('href')) || '';\n            const key = href.toLowerCase();\n            const contentful = hasContent(child);\n            const existing = keepMap.get(key);\n            if (!existing) {\n              keepMap.set(key, { el: child, contentful });\n            } else {\n              if (!existing.contentful && contentful) {\n                if (existing.el && existing.el.remove) existing.el.remove();\n                keepMap.set(key, { el: child, contentful });\n              } else {\n                if (child.remove) { child.remove(); removed.push(child); }\n              }\n            }\n          });\n        }\n      });\n    });\n  });\n\n  observer.observe(document.body, { childList: true, subtree: true });\n  // stop observing after 5s (adjust if your theme injects later)\n  setTimeout(() => observer.disconnect(), 5000);\n\n  console.info('overlay dedupe: removed', removed.length, 'duplicate overlay(s). Kept', keepMap.size, 'unique overlay(s).');\n})();\n</script>"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":false,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","resources":["Miles_LibbeyV_Resume_2025.pdf"],"editor":"source","theme":"lumen","page-layout":"article","grid":{"body-width":"1000px","margin-width":"300px","sidebar-width":"550px","gutter-width":"1.5em"},"page-footer":{"left":"&copy; Miles Libbey V, 2025<br>\nAll content licensed under <i class='bi-badge-cc'></i>\n[(CC BY-NC-SA 4.0)](http://creativecommons.org/licenses/by-nc-sa/4.0/)\n","right":"Site built with <a href='https://quarto.org/'>Quarto</a>\n"},"title":"About Me"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}